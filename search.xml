<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【kafka】安装</title>
    <url>/2024/04/15/%E3%80%90kafka%E3%80%91%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="1-安装kafka之前需要先完成zookeeper的安装"><a href="#1-安装kafka之前需要先完成zookeeper的安装" class="headerlink" title="1.安装kafka之前需要先完成zookeeper的安装"></a>1.安装kafka之前需要先完成zookeeper的安装</h1><p><a href="https://blog.csdn.net/weixin_48453504/article/details/137782170?spm=1001.2014.3001.5502">【zookeeper】安装</a></p>
<h1 id="2-Apache-Kafka官网下载"><a href="#2-Apache-Kafka官网下载" class="headerlink" title="2. Apache Kafka官网下载"></a>2. Apache Kafka官网下载</h1><p><img src="/2024/04/15/%E3%80%90kafka%E3%80%91%E5%AE%89%E8%A3%85/pic1.png"></p>
<h1 id="3-解压完成后修改server-properties配置文件"><a href="#3-解压完成后修改server-properties配置文件" class="headerlink" title="3. 解压完成后修改server.properties配置文件"></a>3. 解压完成后修改server.properties配置文件</h1><p><img src="/2024/04/15/%E3%80%90kafka%E3%80%91%E5%AE%89%E8%A3%85/pic2.png"><br>修改日志文件存放路径<br><img src="/2024/04/15/%E3%80%90kafka%E3%80%91%E5%AE%89%E8%A3%85/pic3.png"></p>
<p>查看与zookeeper连接的端口是否和zookeeper服务所在的端口一致<br>（这里默认是2181，<strong>如果zookeeper启动端口没有修改，这里也无需变更</strong>）<br><img src="/2024/04/15/%E3%80%90kafka%E3%80%91%E5%AE%89%E8%A3%85/pic4.png"></p>
<h1 id="4-启动kafka"><a href="#4-启动kafka" class="headerlink" title="4.启动kafka"></a>4.启动kafka</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">bin\windows\kafka-server-start.bat config\server.properties</span><br></pre></td></tr></table></figure>
<p>如下，则表示启动成功<br><img src="/2024/04/15/%E3%80%90kafka%E3%80%91%E5%AE%89%E8%A3%85/pic5.png"></p>
<p>至此，kafka安装启动结束</p>
<p><strong>安装过程中遇到过许多问题，感谢将这些问题解决过程分享出来的同路人们！</strong></p>
<p>希望这篇文章能帮到你~</p>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>【zookeeper】安装</title>
    <url>/2024/04/15/%E3%80%90zookeeper%E3%80%91%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="1-Apache-Zookeeper官网下载"><a href="#1-Apache-Zookeeper官网下载" class="headerlink" title="1. Apache Zookeeper官网下载"></a>1. Apache Zookeeper官网下载</h1><p> <img src="/2024/04/15/%E3%80%90zookeeper%E3%80%91%E5%AE%89%E8%A3%85/pic1.png"><br> <img src="/2024/04/15/%E3%80%90zookeeper%E3%80%91%E5%AE%89%E8%A3%85/pic2.png"></p>
<h1 id="2-解压后创建log和data文件夹"><a href="#2-解压后创建log和data文件夹" class="headerlink" title="2. 解压后创建log和data文件夹"></a>2. 解压后创建log和data文件夹</h1><p> <img src="/2024/04/15/%E3%80%90zookeeper%E3%80%91%E5%AE%89%E8%A3%85/pic3.png">这个其实不一定要建在zookeeper文件夹下，建在任意一个文件夹里都行，只要配置文件中的路径配置能找到就行</p>
<h1 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3. 修改配置文件"></a>3. 修改配置文件</h1><p> <img src="/2024/04/15/%E3%80%90zookeeper%E3%80%91%E5%AE%89%E8%A3%85/pic4.png"><br> <img src="/2024/04/15/%E3%80%90zookeeper%E3%80%91%E5%AE%89%E8%A3%85/pic5.png"><br><strong>这里要注意！！！<br>win系统下路径分隔符用</strong></p>
<blockquote>
<p>&#x2F;</p>
</blockquote>
<p>有点疑问：为什么win系统磁盘中文件的绝对路径的分隔符是\，但在配置文件中文件路径的分隔符要用&#x2F;？</p>
<p>查询后得出结论：</p>
<blockquote>
<p>在Windows操作系统中，文件路径的绝对路径分隔符是反斜杠\，这是因为反斜杠在Windows系统中被用作文件路径分隔符的标准约定。例如，C:\Users\Admin\Desktop\file.txt 是Windows系统中文件的绝对路径表示方式。<br>而在配置文件中，特别是在类Unix系统（如Linux、MacOS等）中，文件路径的分隔符是正斜杠&#x2F;。<strong>这是因为Unix系统中的路径分隔符是正斜杠，而且正斜杠在配置文件中通常用作路径分隔符的约定</strong>。所以，即使在Windows系统中使用的是反斜杠作为文件路径分隔符，<strong>但在配置文件中为了与Unix系统的约定保持一致，通常会使用正斜杠作为文件路径分隔符</strong>。<br>因此，为了确保在不同操作系统和不同环境下都能正确解析文件路径，通常会建议在配置文件中使用正斜杠&#x2F;作为文件路径的分隔符。这样可以避免在不同系统下出现路径解析错误的情况，保证程序的可移植性和通用性。</p>
</blockquote>
<h1 id="4-启动zookeeper"><a href="#4-启动zookeeper" class="headerlink" title="4.启动zookeeper"></a>4.启动zookeeper</h1><p> <img src="/2024/04/15/%E3%80%90zookeeper%E3%80%91%E5%AE%89%E8%A3%85/pic6.png"></p>
<ol>
<li>zkServer.cmd正常启动如下<br> <img src="/2024/04/15/%E3%80%90zookeeper%E3%80%91%E5%AE%89%E8%A3%85/pic7.png"><br> 如遇闪退，可以在zkServer.cmd文件末尾加上<strong>pause</strong>，以便查看报错原因<br> <img src="/2024/04/15/%E3%80%90zookeeper%E3%80%91%E5%AE%89%E8%A3%85/pic8.png"></li>
<li>zkCli.cmd正常启动如下<br> <img src="/2024/04/15/%E3%80%90zookeeper%E3%80%91%E5%AE%89%E8%A3%85/pic9.png"><br>至此，zookeeper启动成功</li>
</ol>
<p><strong>安装过程中遇到过许多问题，感谢将这些问题解决过程分享出来的同路人们！</strong></p>
<p>希望这篇文章能帮到你~</p>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>【ElasticSearch】安装</title>
    <url>/2024/04/16/%E3%80%90ElasticSearch%E3%80%91%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<hr>
<h1 id="1-官网寻找合适版本下载"><a href="#1-官网寻找合适版本下载" class="headerlink" title="1.官网寻找合适版本下载"></a>1.官网寻找合适版本下载</h1><p><img src="/2024/04/16/%E3%80%90ElasticSearch%E3%80%91%E5%AE%89%E8%A3%85/pic1.png"><br>这里我选择的是8.11.1</p>
<h1 id="2-解压并启动"><a href="#2-解压并启动" class="headerlink" title="2.解压并启动"></a>2.解压并启动</h1><p><img src="/2024/04/16/%E3%80%90ElasticSearch%E3%80%91%E5%AE%89%E8%A3%85/pic2.png"><br>然后在浏览器输入<a href="http://localhost:9200/%EF%BC%8C%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F">http://localhost:9200/，判断是否启动成功</a></p>
<p>如下所示，则表示启动成功<br><img src="/2024/04/16/%E3%80%90ElasticSearch%E3%80%91%E5%AE%89%E8%A3%85/pic3.png"><br>安装过程中遇到过几个bug，记录在这篇文章中</p>
<p><a href="https://blog.csdn.net/weixin_48453504/article/details/137819854?csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%22137819854%22,%22source%22:%22weixin_48453504%22%7D">【ElasticSearch】安装（bug篇）</a></p>
]]></content>
      <categories>
        <category>ES</category>
      </categories>
      <tags>
        <tag>ES</tag>
      </tags>
  </entry>
  <entry>
    <title>【ElasticSearch】安装（bug篇）</title>
    <url>/2024/04/16/%E3%80%90ElasticSearch%E3%80%91%E5%AE%89%E8%A3%85%EF%BC%88bug%E7%AF%87%EF%BC%89/</url>
    <content><![CDATA[<hr>
<p>以下解决办法参考自网友们的分享</p>
<h1 id="1-JDK绑定问题"><a href="#1-JDK绑定问题" class="headerlink" title="1. JDK绑定问题"></a>1. JDK绑定问题</h1><p><img src="/2024/04/16/%E3%80%90ElasticSearch%E3%80%91%E5%AE%89%E8%A3%85%EF%BC%88bug%E7%AF%87%EF%BC%89/pic1.png"><br>但其实这样也没有问题，因为内嵌的jdk版本与当前的es版本是适配的</p>
<p><strong>但是</strong>，如果内嵌的jdk与当前es不适配，那就要修改<strong>配置文件</strong> <strong>&#x2F; 添加环境变量</strong>，让es启动的时候能扫描到我们本地的jdk</p>
<ol>
<li>添加环境变量</li>
</ol>
<p><img src="/2024/04/16/%E3%80%90ElasticSearch%E3%80%91%E5%AE%89%E8%A3%85%EF%BC%88bug%E7%AF%87%EF%BC%89/pic2.png"></p>
<ol start="2">
<li>修改配置文件<br><img src="/2024/04/16/%E3%80%90ElasticSearch%E3%80%91%E5%AE%89%E8%A3%85%EF%BC%88bug%E7%AF%87%EF%BC%89/pic3.png"></li>
</ol>
<h1 id="2-SSL问题"><a href="#2-SSL问题" class="headerlink" title="2. SSL问题"></a>2. SSL问题</h1><p>输入localhost:9200后，报错<br><img src="/2024/04/16/%E3%80%90ElasticSearch%E3%80%91%E5%AE%89%E8%A3%85%EF%BC%88bug%E7%AF%87%EF%BC%89/pic4.png"><br>查看报错信息，发现需要同服务端建立https连接<br><img src="/2024/04/16/%E3%80%90ElasticSearch%E3%80%91%E5%AE%89%E8%A3%85%EF%BC%88bug%E7%AF%87%EF%BC%89/pic5.png"><br>这里有两个解决办法。</p>
<ol>
<li>通过带https前缀的url去访问</li>
</ol>
<p><img src="/2024/04/16/%E3%80%90ElasticSearch%E3%80%91%E5%AE%89%E8%A3%85%EF%BC%88bug%E7%AF%87%EF%BC%89/pic6.png"><br> 需要登录，但这里用户名和密码不知道，有说是&lt;elastic，changeme&gt;的，但试过发现不正确</p>
<p>于是尝试重新设置用户名和密码<br><img src="/2024/04/16/%E3%80%90ElasticSearch%E3%80%91%E5%AE%89%E8%A3%85%EF%BC%88bug%E7%AF%87%EF%BC%89/pic7.png"><br>但是报错<br>（插个眼，先放一边，回头再找解决办法。。）</p>
<ol start="2">
<li>关闭安全措施<br><img src="/2024/04/16/%E3%80%90ElasticSearch%E3%80%91%E5%AE%89%E8%A3%85%EF%BC%88bug%E7%AF%87%EF%BC%89/pic8.png"><br>可以正常访问，不再报错<br><img src="/2024/04/16/%E3%80%90ElasticSearch%E3%80%91%E5%AE%89%E8%A3%85%EF%BC%88bug%E7%AF%87%EF%BC%89/pic9.png"></li>
</ol>
<hr>
<p><strong>感谢将遇到的问题的解决方案分享出来的朋友们！</strong></p>
<p>希望这篇文章能对你有所帮助~</p>
]]></content>
      <categories>
        <category>ES</category>
      </categories>
      <tags>
        <tag>ES</tag>
      </tags>
  </entry>
  <entry>
    <title>【Redis】基本数据类型</title>
    <url>/2024/04/17/%E3%80%90Redis%E3%80%91%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<hr>
<ol>
<li>String</li>
</ol>
<p>底层由SDS（simple dynamic string）实现。主要应用场景有：计数、分布式锁、共享session信息等</p>
<ol start="2">
<li>List</li>
</ol>
<p>底层由双向链表实现。主要应用场景有：消息队列</p>
<ol start="3">
<li>HashMap</li>
</ol>
<p>底层由HashMap实现。主要应用场景有：购物车等需要存储一个对象信息（多个<a href="key:value">key:value</a>值）的场景</p>
<ol start="4">
<li>Set</li>
</ol>
<p>底层由HashMap或整数集合（intset）实现。主要应用场景有：点赞、收藏、关注等唯一性（A只能点赞一次B）场景。</p>
<ol start="5">
<li>Zset</li>
</ol>
<p>底层由跳表（kiplist）实现。主要应用场景有：排行榜等需要根据一定规则来进行排序的场景</p>
<p>未完待续。</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>【Redis】数据持久化</title>
    <url>/2024/04/18/%E3%80%90Redis%E3%80%91%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/</url>
    <content><![CDATA[<hr>
<p>redis是基于内存的数据库，数据如果没有及时更新至磁盘，在系统遭遇故障后，就会造成数据丢失。因此，redis提供了两种数据持久化的方式。分别是AOF和RDB</p>
<ol>
<li>AOF（appending only file）</li>
</ol>
<p>客户端每对数据库做出一次操作，redis就会将操作以命令行的形式存入内核缓冲区的aof文件中，并根据设定的规则，按时将文件中的数据通过系统函数fsync（）写回磁盘。<br>redis对AOF持久化方式提供了三种写回磁盘的时机。</p>
<ol>
<li><p>always ：每当有新的数据写入文件中，就立即将该数据写回磁盘。因为刷盘的频率最高，所以这种方式的安全性最高，但性能最差。</p>
</li>
<li><p>every second ：刷盘的频率为1s，所以安全性和性能都中等。</p>
</li>
<li><p>no ：不按照一定的时间间隔刷盘，而是将时机的选择交由操作系统自身来决定，具有随机性。频率最低，因此安全性最低，性能最好</p>
</li>
<li><p>RDB快照</p>
</li>
</ol>
<p>相较于AOF是将数据库的变更以命令行的形式追加到文件中去，RDB采取的是全量复制的形式，而且是以二进制的形式进行数据的复制。也正因为每次复制都是全量复制，因此这种持久化方式的频率要比AOF低很多，但是因为是以二进制的形式存储数据，相较于AOF每次恢复的时候还需要执行命令，RDB恢复数据的时候就会快很多，直接读取即可。<br>redis针对RDB同样也提供了两种持久化模式。</p>
<ol>
<li>同步操作：由主线程来完成数据的复制操作，备份期间，由于主线程去忙其他任务了，所以期间到来的任务没有办法得到及时处理。</li>
<li>异步操作：创建一个子线程，由子线程异步地来完成数据复制。子线程会先复制主线程的页表，然后，根据页表，映射到内存</li>
</ol>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>一条mysql语句的执行</title>
    <url>/2024/04/16/%E3%80%90MySql%E3%80%91%E4%B8%80%E6%9D%A1mysql%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<hr>
<p><img src="/2024/04/16/%E3%80%90MySql%E3%80%91%E4%B8%80%E6%9D%A1mysql%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%89%A7%E8%A1%8C/pic1.jpg"></p>
<ol>
<li>客户端首先和MySQL服务器建立连接</li>
<li>建立连接后将MySQL语句发送给服务器</li>
<li>解析器首先对语句进行解析（词法、语法分析）</li>
<li>解析完成后交由预处理器进行预处理操作<ol>
<li>判断查询语句的表和字段是否存在</li>
<li>将select * 拓展成查询全列（select id,…)的语句</li>
</ol>
</li>
<li>然后交由优化器给出执行方案</li>
<li>最后交给执行器执行</li>
<li>执行器通过调用存储引擎提供的API接口进行数据的存取</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>线程的状态</title>
    <url>/2024/04/15/%E3%80%90Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E3%80%91%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81/</url>
    <content><![CDATA[<hr>
<p>与操作系统线程的状态定义不同，Java线程中的状态有6种，各自对应不同的操作系统中的线程状态<br><a name="GWG7A"></a></p>
<h1 id="NEW"><a href="#NEW" class="headerlink" title="NEW"></a>NEW</h1><p>调用start（）方法之前，对应于操作系统线程的启动态<br><a name="nJaTf"></a></p>
<h1 id="RUNNABLE"><a href="#RUNNABLE" class="headerlink" title="RUNNABLE"></a>RUNNABLE</h1><p>调用start（）方法之后，对应于操作系统线程的就绪态&#x2F;运行态<br><img src="/2024/04/15/%E3%80%90Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E3%80%91%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81/pic1.png"></p>
<p><a name="AbcZk"></a></p>
<h1 id="BLOCKED"><a href="#BLOCKED" class="headerlink" title="BLOCKED"></a>BLOCKED</h1><p>线程请求资源未能得到满足，对应于操作系统线程的阻塞态<br><a name="DlXdF"></a></p>
<h1 id="WAITING"><a href="#WAITING" class="headerlink" title="WAITING"></a>WAITING</h1><p>调用Thread.wait()，Thread.join()方法之后，对应于操作系统线程的挂起态<br>需要有其他线程来唤醒它<br><a name="gHUY3"></a></p>
<h1 id="TIME-WAITING"><a href="#TIME-WAITING" class="headerlink" title="TIME-WAITING"></a>TIME-WAITING</h1><p>调用Thread.sleep(long millis)、Thread.join(long millis)方法之后，对应于操作系统线程的挂起态<br>可以自动唤醒<br><img src="/2024/04/15/%E3%80%90Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E3%80%91%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81/pic2.png"><br><a name="ne74J"></a></p>
<h1 id="TERMINATED"><a href="#TERMINATED" class="headerlink" title="TERMINATED"></a>TERMINATED</h1><h2 id><a href="#" class="headerlink" title></a><a name="qrcG4"></a></h2>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>线程的创建和启动</title>
    <url>/2024/04/15/%E3%80%90Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E3%80%91%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<p><a name="Kh76L"></a></p>
<h2 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h2><p>创建线程主要通过继承类和实现接口来完成<br><a name="go9bC"></a></p>
<h3 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h3><p>需要重写Thread类中的run（）方法<br><a name="SE0Wj"></a></p>
<h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><p>需要实现接口中的run（）方法<br><img src="/2024/04/15/%E3%80%90Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E3%80%91%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%90%AF%E5%8A%A8/pic1.png"><br><a name="HbiB1"></a></p>
<h3 id="实现Callable接口"><a href="#实现Callable接口" class="headerlink" title="实现Callable接口"></a>实现Callable接口</h3><p>需要实现接口中的call（）方法，通过这种方式创建的线程，可以有返回值<V><br><img src="/2024/04/15/%E3%80%90Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E3%80%91%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%90%AF%E5%8A%A8/pic2.png"><br><a name="s8v8x"></a></V></p>
<h2 id="启动线程"><a href="#启动线程" class="headerlink" title="启动线程"></a>启动线程</h2><p>通过start（）方法启动线程<img src="/2024/04/15/%E3%80%90Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E3%80%91%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%90%AF%E5%8A%A8/pic3.png"><br>阅读start（）源码，探究一下底层实现<br><br><img src="/2024/04/15/%E3%80%90Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E3%80%91%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%90%AF%E5%8A%A8/pic4.png"><br><br>再看看start0（）做了些啥<br><br><img src="/2024/04/15/%E3%80%90Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E3%80%91%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%90%AF%E5%8A%A8/pic5.png"><br><br>start0（）是被native修饰的方法，说明它是由外部语言（C&#x2F;C++）来实现的，而不是通过JVM虚拟机来执行<br>所以，那具体做了啥呢？<br>（未完，待定）</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>volatile关键字</title>
    <url>/2024/04/15/%E3%80%90Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E3%80%91volatile%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<p>volitile关键字用于解决多线程并发执行时可能出现的<strong>可见性</strong>问题<br><a name="sYfCx"></a></p>
<h2 id="缓存锁定"><a href="#缓存锁定" class="headerlink" title="缓存锁定"></a>缓存锁定</h2><p>处理器在对已经加载到cache当中的共享数据进行修改时，会向总线发出命令，其他处理器通过<strong>嗅探总线</strong>发现有处理器请求写内存地址，而该内存地址为共享地址，处理器就会使存有该共享内存地址的cache行失效。<strong>处理器修改完共享数据后，会将结果写回内存</strong>。这样，其他处理器下次对共享数据的操作就会先从主存当中读取该数据到cache中，然后再进行处理，这样得到的就是最新的数据，避免了可见性问题。</p>
<p>根据书中所写，对加了volatile关键字的变量进行读写操作时，生成的汇编代码前会加上lock。<br><img src="/2024/04/15/%E3%80%90Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E3%80%91volatile%E5%85%B3%E9%94%AE%E5%AD%97/pic1.png"><br><br>于是，我写了这样一段demo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        temp++;</span><br><span class="line">        <span class="type">Goods</span> <span class="variable">bottle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Goods</span>();</span><br><span class="line">        bottle.price++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Goods</span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">price</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    Goods()&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后通过javac以及javap命令在终端查看它编译后的汇编代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javac -g:none -d out src/test.java</span><br><span class="line">javap -c -v -p out/test.class &gt; out/test.asm</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>得到的汇编文件中关键代码部分如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  static volatile int temp;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: (0x0048) ACC_STATIC, ACC_VOLATILE</span><br><span class="line"></span><br><span class="line">  public test();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: (0x0001) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: return</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: (0x0009) ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=3, locals=2, args_size=1</span><br><span class="line">         0: getstatic     #7                  // Field temp:I</span><br><span class="line">         3: iconst_1</span><br><span class="line">         4: iadd</span><br><span class="line">         5: putstatic     #7                  // Field temp:I</span><br><span class="line">         8: new           #13                 // class Goods</span><br><span class="line">        11: dup</span><br><span class="line">        12: invokespecial #15                 // Method Goods.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">        15: astore_1</span><br><span class="line">        16: aload_1</span><br><span class="line">        17: dup</span><br><span class="line">        18: getfield      #16                 // Field Goods.price:I</span><br><span class="line">        21: iconst_1</span><br><span class="line">        22: iadd</span><br><span class="line">        23: putfield      #16                 // Field Goods.price:I</span><br><span class="line">        26: return</span><br><span class="line"></span><br><span class="line">  static &#123;&#125;;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: (0x0008) ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=0, args_size=0</span><br><span class="line">         0: bipush        10</span><br><span class="line">         2: putstatic     #7                  // Field temp:I</span><br><span class="line">         5: return</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>没有找到带有lock前缀的汇编指令，于是我去求助了一下gpt，得到的解答如下<br>当你查看 Java 代码编译后的汇编代码时，如果发现加了 volatile 的变量对应的汇编语句没有出现 lock 前缀，可能有以下几个原因：</p>
<ol>
<li><strong>编译器优化</strong>：编译器在生成汇编代码时可能会进行优化，将 volatile 变量的读写操作优化为更高效的方式，而不是简单地添加 lock 前缀。</li>
<li><strong>硬件层面支持</strong>：某些处理器对 volatile 变量的操作可能有硬件层面的支持，因此在汇编代码中不需要显式添加 lock。</li>
<li><strong>汇编代码层面隐藏</strong>：lock 前缀可能被隐藏在汇编代码的更底层的指令中，不一定会直接出现在你查看的汇编代码中。</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>【ES】springboot集成ES</title>
    <url>/2024/04/19/%E3%80%90ES%E3%80%91springboot%E9%9B%86%E6%88%90ES/</url>
    <content><![CDATA[<hr>
<h1 id="1-去Spring官方文档确认版本兼容性"><a href="#1-去Spring官方文档确认版本兼容性" class="headerlink" title="1. 去Spring官方文档确认版本兼容性"></a>1. 去Spring官方文档确认版本兼容性</h1><p><img src="/2024/04/19/%E3%80%90ES%E3%80%91springboot%E9%9B%86%E6%88%90ES/pic1.png"><br>这一版的文档里没有给出springboot的版本对应，但我在一个博主的文章里看到的es8.0以前的官方文档中就有给出来，所以还需要再去寻找spring framework和springboot的对应关系？？？<br><img src="/2024/04/19/%E3%80%90ES%E3%80%91springboot%E9%9B%86%E6%88%90ES/pic2.png"></p>
<p>还有有个疑问，因为我选择的es依赖包是spring-boot-starter-data-elasticsearch，但官方文档里只给出了Spring Data Elasticsearch的信息，而这两者的版本对应关系我目前只能从加载的依赖包中找到，或许有其他的办法？（还请广大网友指点一下）<br><img src="/2024/04/19/%E3%80%90ES%E3%80%91springboot%E9%9B%86%E6%88%90ES/pic3.png"></p>
<h1 id="2-es的安装和配置"><a href="#2-es的安装和配置" class="headerlink" title="2. es的安装和配置"></a>2. es的安装和配置</h1><p>找到合适的es版本后，就可以去es官网进行下载安装了<br><a href="https://blog.csdn.net/weixin_48453504/article/details/137818042?spm=1001.2014.3001.5501">ES安装</a></p>
<h1 id="3-添加依赖"><a href="#3-添加依赖" class="headerlink" title="3. 添加依赖"></a>3. 添加依赖</h1><p>安装好es后就可以添加spring boot starter data elasticsearch的依赖包了<br>spring boot starter data elasticsearch的依赖包中集成了Spring Data Elasticsearch<br><img src="/2024/04/19/%E3%80%90ES%E3%80%91springboot%E9%9B%86%E6%88%90ES/pic4.png"><br>如下，我的springboot版本是3.1.7<br><img src="/2024/04/19/%E3%80%90ES%E3%80%91springboot%E9%9B%86%E6%88%90ES/pic5.png"></p>
<p><img src="/2024/04/19/%E3%80%90ES%E3%80%91springboot%E9%9B%86%E6%88%90ES/pic6.png"></p>
<h1 id="4-修改application-properties文件"><a href="#4-修改application-properties文件" class="headerlink" title="4. 修改application.properties文件"></a>4. 修改application.properties文件</h1><p><img src="/2024/04/19/%E3%80%90ES%E3%80%91springboot%E9%9B%86%E6%88%90ES/pic7.png"></p>
<h1 id="5-给实体类添加注解"><a href="#5-给实体类添加注解" class="headerlink" title="5. 给实体类添加注解"></a>5. 给实体类添加注解</h1><p><img src="/2024/04/19/%E3%80%90ES%E3%80%91springboot%E9%9B%86%E6%88%90ES/pic8.png"></p>
<h1 id="6-测试"><a href="#6-测试" class="headerlink" title="6. 测试"></a>6. 测试</h1><p><img src="/2024/04/19/%E3%80%90ES%E3%80%91springboot%E9%9B%86%E6%88%90ES/pic9.png"><br><img src="/2024/04/19/%E3%80%90ES%E3%80%91springboot%E9%9B%86%E6%88%90ES/pic10.png"></p>
<p>过程遇到太多坑了，尤其要注意<strong>版本适配性</strong>问题！！！</p>
<p>参考了很多网友的解决方案，感谢！</p>
]]></content>
      <categories>
        <category>ES</category>
      </categories>
      <tags>
        <tag>ES</tag>
      </tags>
  </entry>
  <entry>
    <title>【Redis】过期删除策略</title>
    <url>/2024/05/06/%E3%80%90Redis%E3%80%91%E8%BF%87%E6%9C%9F%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<hr>
<ol>
<li>定时删除</li>
</ol>
<p>给每个存入redis的数据设置一个过期删除事件，过期时间一到，就自动触发事件，删除该数据</p>
<ol start="2">
<li>懒惰删除</li>
</ol>
<p>只有当使用到数据的时候，才判断该数据是否过期，过期则删除，否则，不做处理。</p>
<ol start="3">
<li>定期删除</li>
</ol>
<p>redis定期从过期字典里随机抽取一定数量（可以设置）的数据进行判断，如果超过一定比例（可以设置）的数据都过期了，则再进行一次随机检验，直到过期数据所占比例未达到设定值或者检验时间超时了。</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>【Redis】缓存问题</title>
    <url>/2024/05/06/%E3%80%90Redis%E3%80%91%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
