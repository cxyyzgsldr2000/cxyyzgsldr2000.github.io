<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【kafka】安装</title>
    <url>/2024/04/15/%E3%80%90kafka%E3%80%91%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="1-安装kafka之前需要先完成zookeeper的安装"><a href="#1-安装kafka之前需要先完成zookeeper的安装" class="headerlink" title="1.安装kafka之前需要先完成zookeeper的安装"></a>1.安装kafka之前需要先完成zookeeper的安装</h1><p><a href="https://blog.csdn.net/weixin_48453504/article/details/137782170?spm=1001.2014.3001.5502">【zookeeper】安装</a></p>
<h1 id="2-Apache-Kafka官网下载"><a href="#2-Apache-Kafka官网下载" class="headerlink" title="2. Apache Kafka官网下载"></a>2. Apache Kafka官网下载</h1><p><img src="/2024/04/15/%E3%80%90kafka%E3%80%91%E5%AE%89%E8%A3%85/pic1.png"></p>
<h1 id="3-解压完成后修改server-properties配置文件"><a href="#3-解压完成后修改server-properties配置文件" class="headerlink" title="3. 解压完成后修改server.properties配置文件"></a>3. 解压完成后修改server.properties配置文件</h1><p><img src="/2024/04/15/%E3%80%90kafka%E3%80%91%E5%AE%89%E8%A3%85/pic2.png"><br>修改日志文件存放路径<br><img src="/2024/04/15/%E3%80%90kafka%E3%80%91%E5%AE%89%E8%A3%85/pic3.png"></p>
<p>查看与zookeeper连接的端口是否和zookeeper服务所在的端口一致<br>（这里默认是2181，<strong>如果zookeeper启动端口没有修改，这里也无需变更</strong>）<br><img src="/2024/04/15/%E3%80%90kafka%E3%80%91%E5%AE%89%E8%A3%85/pic4.png"></p>
<h1 id="4-启动kafka"><a href="#4-启动kafka" class="headerlink" title="4.启动kafka"></a>4.启动kafka</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">bin\windows\kafka-server-start.bat config\server.properties</span><br></pre></td></tr></table></figure>
<p>如下，则表示启动成功<br><img src="/2024/04/15/%E3%80%90kafka%E3%80%91%E5%AE%89%E8%A3%85/pic5.png"></p>
<p>至此，kafka安装启动结束</p>
<p><strong>安装过程中遇到过许多问题，感谢将这些问题解决过程分享出来的同路人们！</strong></p>
<p>希望这篇文章能帮到你~</p>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>【zookeeper】安装</title>
    <url>/2024/04/15/%E3%80%90zookeeper%E3%80%91%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="1-Apache-Zookeeper官网下载"><a href="#1-Apache-Zookeeper官网下载" class="headerlink" title="1. Apache Zookeeper官网下载"></a>1. Apache Zookeeper官网下载</h1><p> <img src="/2024/04/15/%E3%80%90zookeeper%E3%80%91%E5%AE%89%E8%A3%85/pic1.png"><br> <img src="/2024/04/15/%E3%80%90zookeeper%E3%80%91%E5%AE%89%E8%A3%85/pic2.png"></p>
<h1 id="2-解压后创建log和data文件夹"><a href="#2-解压后创建log和data文件夹" class="headerlink" title="2. 解压后创建log和data文件夹"></a>2. 解压后创建log和data文件夹</h1><p> <img src="/2024/04/15/%E3%80%90zookeeper%E3%80%91%E5%AE%89%E8%A3%85/pic3.png">这个其实不一定要建在zookeeper文件夹下，建在任意一个文件夹里都行，只要配置文件中的路径配置能找到就行</p>
<h1 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3. 修改配置文件"></a>3. 修改配置文件</h1><p> <img src="/2024/04/15/%E3%80%90zookeeper%E3%80%91%E5%AE%89%E8%A3%85/pic4.png"><br> <img src="/2024/04/15/%E3%80%90zookeeper%E3%80%91%E5%AE%89%E8%A3%85/pic5.png"><br><strong>这里要注意！！！<br>win系统下路径分隔符用</strong></p>
<blockquote>
<p>&#x2F;</p>
</blockquote>
<p>有点疑问：为什么win系统磁盘中文件的绝对路径的分隔符是\，但在配置文件中文件路径的分隔符要用&#x2F;？</p>
<p>查询后得出结论：</p>
<blockquote>
<p>在Windows操作系统中，文件路径的绝对路径分隔符是反斜杠\，这是因为反斜杠在Windows系统中被用作文件路径分隔符的标准约定。例如，C:\Users\Admin\Desktop\file.txt 是Windows系统中文件的绝对路径表示方式。<br>而在配置文件中，特别是在类Unix系统（如Linux、MacOS等）中，文件路径的分隔符是正斜杠&#x2F;。<strong>这是因为Unix系统中的路径分隔符是正斜杠，而且正斜杠在配置文件中通常用作路径分隔符的约定</strong>。所以，即使在Windows系统中使用的是反斜杠作为文件路径分隔符，<strong>但在配置文件中为了与Unix系统的约定保持一致，通常会使用正斜杠作为文件路径分隔符</strong>。<br>因此，为了确保在不同操作系统和不同环境下都能正确解析文件路径，通常会建议在配置文件中使用正斜杠&#x2F;作为文件路径的分隔符。这样可以避免在不同系统下出现路径解析错误的情况，保证程序的可移植性和通用性。</p>
</blockquote>
<h1 id="4-启动zookeeper"><a href="#4-启动zookeeper" class="headerlink" title="4.启动zookeeper"></a>4.启动zookeeper</h1><p> <img src="/2024/04/15/%E3%80%90zookeeper%E3%80%91%E5%AE%89%E8%A3%85/pic6.png"></p>
<ol>
<li>zkServer.cmd正常启动如下<br> <img src="/2024/04/15/%E3%80%90zookeeper%E3%80%91%E5%AE%89%E8%A3%85/pic7.png"><br> 如遇闪退，可以在zkServer.cmd文件末尾加上<strong>pause</strong>，以便查看报错原因<br> <img src="/2024/04/15/%E3%80%90zookeeper%E3%80%91%E5%AE%89%E8%A3%85/pic8.png"></li>
<li>zkCli.cmd正常启动如下<br> <img src="/2024/04/15/%E3%80%90zookeeper%E3%80%91%E5%AE%89%E8%A3%85/pic9.png"><br>至此，zookeeper启动成功</li>
</ol>
<p><strong>安装过程中遇到过许多问题，感谢将这些问题解决过程分享出来的同路人们！</strong></p>
<p>希望这篇文章能帮到你~</p>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>【ElasticSearch】安装</title>
    <url>/2024/04/16/%E3%80%90ElasticSearch%E3%80%91%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<hr>
<h1 id="1-官网寻找合适版本下载"><a href="#1-官网寻找合适版本下载" class="headerlink" title="1.官网寻找合适版本下载"></a>1.官网寻找合适版本下载</h1><p><img src="/2024/04/16/%E3%80%90ElasticSearch%E3%80%91%E5%AE%89%E8%A3%85/pic1.png"><br>这里我选择的是8.11.1</p>
<h1 id="2-解压并启动"><a href="#2-解压并启动" class="headerlink" title="2.解压并启动"></a>2.解压并启动</h1><p><img src="/2024/04/16/%E3%80%90ElasticSearch%E3%80%91%E5%AE%89%E8%A3%85/pic2.png"><br>然后在浏览器输入<a href="http://localhost:9200/%EF%BC%8C%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F">http://localhost:9200/，判断是否启动成功</a></p>
<p>如下所示，则表示启动成功<br><img src="/2024/04/16/%E3%80%90ElasticSearch%E3%80%91%E5%AE%89%E8%A3%85/pic3.png"><br>安装过程中遇到过几个bug，记录在这篇文章中</p>
<p><a href="https://blog.csdn.net/weixin_48453504/article/details/137819854?csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%22137819854%22,%22source%22:%22weixin_48453504%22%7D">【ElasticSearch】安装（bug篇）</a></p>
]]></content>
      <categories>
        <category>ES</category>
      </categories>
      <tags>
        <tag>ES</tag>
      </tags>
  </entry>
  <entry>
    <title>【ElasticSearch】安装（bug篇）</title>
    <url>/2024/04/16/%E3%80%90ElasticSearch%E3%80%91%E5%AE%89%E8%A3%85%EF%BC%88bug%E7%AF%87%EF%BC%89/</url>
    <content><![CDATA[<hr>
<p>以下解决办法参考自网友们的分享</p>
<h1 id="1-JDK绑定问题"><a href="#1-JDK绑定问题" class="headerlink" title="1. JDK绑定问题"></a>1. JDK绑定问题</h1><p><img src="/2024/04/16/%E3%80%90ElasticSearch%E3%80%91%E5%AE%89%E8%A3%85%EF%BC%88bug%E7%AF%87%EF%BC%89/pic1.png"><br>但其实这样也没有问题，因为内嵌的jdk版本与当前的es版本是适配的</p>
<p><strong>但是</strong>，如果内嵌的jdk与当前es不适配，那就要修改<strong>配置文件</strong> <strong>&#x2F; 添加环境变量</strong>，让es启动的时候能扫描到我们本地的jdk</p>
<ol>
<li>添加环境变量</li>
</ol>
<p><img src="/2024/04/16/%E3%80%90ElasticSearch%E3%80%91%E5%AE%89%E8%A3%85%EF%BC%88bug%E7%AF%87%EF%BC%89/pic2.png"></p>
<ol start="2">
<li>修改配置文件<br><img src="/2024/04/16/%E3%80%90ElasticSearch%E3%80%91%E5%AE%89%E8%A3%85%EF%BC%88bug%E7%AF%87%EF%BC%89/pic3.png"></li>
</ol>
<h1 id="2-SSL问题"><a href="#2-SSL问题" class="headerlink" title="2. SSL问题"></a>2. SSL问题</h1><p>输入localhost:9200后，报错<br><img src="/2024/04/16/%E3%80%90ElasticSearch%E3%80%91%E5%AE%89%E8%A3%85%EF%BC%88bug%E7%AF%87%EF%BC%89/pic4.png"><br>查看报错信息，发现需要同服务端建立https连接<br><img src="/2024/04/16/%E3%80%90ElasticSearch%E3%80%91%E5%AE%89%E8%A3%85%EF%BC%88bug%E7%AF%87%EF%BC%89/pic5.png"><br>这里有两个解决办法。</p>
<ol>
<li>通过带https前缀的url去访问</li>
</ol>
<p><img src="/2024/04/16/%E3%80%90ElasticSearch%E3%80%91%E5%AE%89%E8%A3%85%EF%BC%88bug%E7%AF%87%EF%BC%89/pic6.png"><br> 需要登录，但这里用户名和密码不知道，有说是&lt;elastic，changeme&gt;的，但试过发现不正确</p>
<p>于是尝试重新设置用户名和密码<br><img src="/2024/04/16/%E3%80%90ElasticSearch%E3%80%91%E5%AE%89%E8%A3%85%EF%BC%88bug%E7%AF%87%EF%BC%89/pic7.png"><br>但是报错<br>（插个眼，先放一边，回头再找解决办法。。）</p>
<ol start="2">
<li>关闭安全措施<br><img src="/2024/04/16/%E3%80%90ElasticSearch%E3%80%91%E5%AE%89%E8%A3%85%EF%BC%88bug%E7%AF%87%EF%BC%89/pic8.png"><br>可以正常访问，不再报错<br><img src="/2024/04/16/%E3%80%90ElasticSearch%E3%80%91%E5%AE%89%E8%A3%85%EF%BC%88bug%E7%AF%87%EF%BC%89/pic9.png"></li>
</ol>
<hr>
<p><strong>感谢将遇到的问题的解决方案分享出来的朋友们！</strong></p>
<p>希望这篇文章能对你有所帮助~</p>
]]></content>
      <categories>
        <category>ES</category>
      </categories>
      <tags>
        <tag>ES</tag>
      </tags>
  </entry>
  <entry>
    <title>【Redis】基本数据类型</title>
    <url>/2024/04/17/%E3%80%90Redis%E3%80%91%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<hr>
<ol>
<li>String</li>
</ol>
<p>底层由SDS（simple dynamic string）实现。主要应用场景有：计数、分布式锁、共享session信息等</p>
<ol start="2">
<li>List</li>
</ol>
<p>底层由双向链表实现。主要应用场景有：消息队列</p>
<ol start="3">
<li>HashMap</li>
</ol>
<p>底层由HashMap实现。主要应用场景有：购物车等需要存储一个对象信息（多个<a href="key:value">key:value</a>值）的场景</p>
<ol start="4">
<li>Set</li>
</ol>
<p>底层由HashMap或整数集合（intset）实现。主要应用场景有：点赞、收藏、关注等唯一性（A只能点赞一次B）场景。</p>
<ol start="5">
<li>Zset</li>
</ol>
<p>底层由跳表（kiplist）实现。主要应用场景有：排行榜等需要根据一定规则来进行排序的场景</p>
<p>未完待续。</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>【Redis】数据持久化</title>
    <url>/2024/04/18/%E3%80%90Redis%E3%80%91%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/</url>
    <content><![CDATA[<hr>
<p>redis是基于内存的数据库，数据如果没有及时更新至磁盘，在系统遭遇故障后，就会造成数据丢失。因此，redis提供了两种数据持久化的方式。分别是AOF和RDB</p>
<ol>
<li>AOF（appending only file）</li>
</ol>
<p>客户端每对数据库做出一次操作，redis就会将操作以命令行的形式存入内核缓冲区的aof文件中，并根据设定的规则，按时将文件中的数据通过系统函数fsync（）写回磁盘。<br>redis对AOF持久化方式提供了三种写回磁盘的时机。</p>
<ol>
<li><p>always ：每当有新的数据写入文件中，就立即将该数据写回磁盘。因为刷盘的频率最高，所以这种方式的安全性最高，但性能最差。</p>
</li>
<li><p>every second ：刷盘的频率为1s，所以安全性和性能都中等。</p>
</li>
<li><p>no ：不按照一定的时间间隔刷盘，而是将时机的选择交由操作系统自身来决定，具有随机性。频率最低，因此安全性最低，性能最好</p>
</li>
<li><p>RDB快照</p>
</li>
</ol>
<p>相较于AOF是将数据库的变更以命令行的形式追加到文件中去，RDB采取的是全量复制的形式，而且是以二进制的形式进行数据的复制。也正因为每次复制都是全量复制，因此这种持久化方式的频率要比AOF低很多，但是因为是以二进制的形式存储数据，相较于AOF每次恢复的时候还需要执行命令，RDB恢复数据的时候就会快很多，直接读取即可。<br>redis针对RDB同样也提供了两种持久化模式。</p>
<ol>
<li>同步操作：由主线程来完成数据的复制操作，备份期间，由于主线程去忙其他任务了，所以期间到来的任务没有办法得到及时处理。</li>
<li>异步操作：创建一个子线程，由子线程异步地来完成数据复制。子线程会先复制主线程的页表，然后，根据页表，映射到内存</li>
</ol>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>一条mysql语句的执行</title>
    <url>/2024/04/16/%E3%80%90MySql%E3%80%91%E4%B8%80%E6%9D%A1mysql%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<hr>
<p><img src="/2024/04/16/%E3%80%90MySql%E3%80%91%E4%B8%80%E6%9D%A1mysql%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%89%A7%E8%A1%8C/pic1.jpg"></p>
<ol>
<li>客户端首先和MySQL服务器建立连接</li>
<li>建立连接后将MySQL语句发送给服务器</li>
<li>解析器首先对语句进行解析（词法、语法分析）</li>
<li>解析完成后交由预处理器进行预处理操作<ol>
<li>判断查询语句的表和字段是否存在</li>
<li>将select * 拓展成查询全列（select id,…)的语句</li>
</ol>
</li>
<li>然后交由优化器给出执行方案</li>
<li>最后交给执行器执行</li>
<li>执行器通过调用存储引擎提供的API接口进行数据的存取</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>线程的状态</title>
    <url>/2024/04/15/%E3%80%90Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E3%80%91%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81/</url>
    <content><![CDATA[<hr>
<p>与操作系统线程的状态定义不同，Java线程中的状态有6种，各自对应不同的操作系统中的线程状态<br><a name="GWG7A"></a></p>
<h1 id="NEW"><a href="#NEW" class="headerlink" title="NEW"></a>NEW</h1><p>调用start（）方法之前，对应于操作系统线程的启动态<br><a name="nJaTf"></a></p>
<h1 id="RUNNABLE"><a href="#RUNNABLE" class="headerlink" title="RUNNABLE"></a>RUNNABLE</h1><p>调用start（）方法之后，对应于操作系统线程的就绪态&#x2F;运行态<br><img src="/2024/04/15/%E3%80%90Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E3%80%91%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81/pic1.png"></p>
<p><a name="AbcZk"></a></p>
<h1 id="BLOCKED"><a href="#BLOCKED" class="headerlink" title="BLOCKED"></a>BLOCKED</h1><p>线程请求资源未能得到满足，对应于操作系统线程的阻塞态<br><a name="DlXdF"></a></p>
<h1 id="WAITING"><a href="#WAITING" class="headerlink" title="WAITING"></a>WAITING</h1><p>调用Thread.wait()，Thread.join()方法之后，对应于操作系统线程的挂起态<br>需要有其他线程来唤醒它<br><a name="gHUY3"></a></p>
<h1 id="TIME-WAITING"><a href="#TIME-WAITING" class="headerlink" title="TIME-WAITING"></a>TIME-WAITING</h1><p>调用Thread.sleep(long millis)、Thread.join(long millis)方法之后，对应于操作系统线程的挂起态<br>可以自动唤醒<br><img src="/2024/04/15/%E3%80%90Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E3%80%91%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81/pic2.png"><br><a name="ne74J"></a></p>
<h1 id="TERMINATED"><a href="#TERMINATED" class="headerlink" title="TERMINATED"></a>TERMINATED</h1><h2 id><a href="#" class="headerlink" title></a><a name="qrcG4"></a></h2>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>线程的创建和启动</title>
    <url>/2024/04/15/%E3%80%90Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E3%80%91%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<p><a name="Kh76L"></a></p>
<h2 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h2><p>创建线程主要通过继承类和实现接口来完成<br><a name="go9bC"></a></p>
<h3 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h3><p>需要重写Thread类中的run（）方法<br><a name="SE0Wj"></a></p>
<h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><p>需要实现接口中的run（）方法<br><img src="/2024/04/15/%E3%80%90Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E3%80%91%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%90%AF%E5%8A%A8/pic1.png"><br><a name="HbiB1"></a></p>
<h3 id="实现Callable接口"><a href="#实现Callable接口" class="headerlink" title="实现Callable接口"></a>实现Callable接口</h3><p>需要实现接口中的call（）方法，通过这种方式创建的线程，可以有返回值<V><br><img src="/2024/04/15/%E3%80%90Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E3%80%91%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%90%AF%E5%8A%A8/pic2.png"><br><a name="s8v8x"></a></V></p>
<h2 id="启动线程"><a href="#启动线程" class="headerlink" title="启动线程"></a>启动线程</h2><p>通过start（）方法启动线程<img src="/2024/04/15/%E3%80%90Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E3%80%91%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%90%AF%E5%8A%A8/pic3.png"><br>阅读start（）源码，探究一下底层实现<br><br><img src="/2024/04/15/%E3%80%90Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E3%80%91%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%90%AF%E5%8A%A8/pic4.png"><br><br>再看看start0（）做了些啥<br><br><img src="/2024/04/15/%E3%80%90Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E3%80%91%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%90%AF%E5%8A%A8/pic5.png"><br><br>start0（）是被native修饰的方法，说明它是由外部语言（C&#x2F;C++）来实现的，而不是通过JVM虚拟机来执行<br>所以，那具体做了啥呢？<br>（未完，待定）</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>volatile关键字</title>
    <url>/2024/04/15/%E3%80%90Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E3%80%91volatile%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<p>volitile关键字用于解决多线程并发执行时可能出现的<strong>可见性</strong>问题<br><a name="sYfCx"></a></p>
<h2 id="缓存锁定"><a href="#缓存锁定" class="headerlink" title="缓存锁定"></a>缓存锁定</h2><p>处理器在对已经加载到cache当中的共享数据进行修改时，会向总线发出命令，其他处理器通过<strong>嗅探总线</strong>发现有处理器请求写内存地址，而该内存地址为共享地址，处理器就会使存有该共享内存地址的cache行失效。<strong>处理器修改完共享数据后，会将结果写回内存</strong>。这样，其他处理器下次对共享数据的操作就会先从主存当中读取该数据到cache中，然后再进行处理，这样得到的就是最新的数据，避免了可见性问题。</p>
<p>根据书中所写，对加了volatile关键字的变量进行读写操作时，生成的汇编代码前会加上lock。<br><img src="/2024/04/15/%E3%80%90Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E3%80%91volatile%E5%85%B3%E9%94%AE%E5%AD%97/pic1.png"><br><br>于是，我写了这样一段demo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        temp++;</span><br><span class="line">        <span class="type">Goods</span> <span class="variable">bottle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Goods</span>();</span><br><span class="line">        bottle.price++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Goods</span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">price</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    Goods()&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后通过javac以及javap命令在终端查看它编译后的汇编代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javac -g:none -d out src/test.java</span><br><span class="line">javap -c -v -p out/test.class &gt; out/test.asm</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>得到的汇编文件中关键代码部分如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  static volatile int temp;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: (0x0048) ACC_STATIC, ACC_VOLATILE</span><br><span class="line"></span><br><span class="line">  public test();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: (0x0001) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: return</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: (0x0009) ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=3, locals=2, args_size=1</span><br><span class="line">         0: getstatic     #7                  // Field temp:I</span><br><span class="line">         3: iconst_1</span><br><span class="line">         4: iadd</span><br><span class="line">         5: putstatic     #7                  // Field temp:I</span><br><span class="line">         8: new           #13                 // class Goods</span><br><span class="line">        11: dup</span><br><span class="line">        12: invokespecial #15                 // Method Goods.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">        15: astore_1</span><br><span class="line">        16: aload_1</span><br><span class="line">        17: dup</span><br><span class="line">        18: getfield      #16                 // Field Goods.price:I</span><br><span class="line">        21: iconst_1</span><br><span class="line">        22: iadd</span><br><span class="line">        23: putfield      #16                 // Field Goods.price:I</span><br><span class="line">        26: return</span><br><span class="line"></span><br><span class="line">  static &#123;&#125;;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: (0x0008) ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=0, args_size=0</span><br><span class="line">         0: bipush        10</span><br><span class="line">         2: putstatic     #7                  // Field temp:I</span><br><span class="line">         5: return</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>没有找到带有lock前缀的汇编指令，于是我去求助了一下gpt，得到的解答如下<br>当你查看 Java 代码编译后的汇编代码时，如果发现加了 volatile 的变量对应的汇编语句没有出现 lock 前缀，可能有以下几个原因：</p>
<ol>
<li><strong>编译器优化</strong>：编译器在生成汇编代码时可能会进行优化，将 volatile 变量的读写操作优化为更高效的方式，而不是简单地添加 lock 前缀。</li>
<li><strong>硬件层面支持</strong>：某些处理器对 volatile 变量的操作可能有硬件层面的支持，因此在汇编代码中不需要显式添加 lock。</li>
<li><strong>汇编代码层面隐藏</strong>：lock 前缀可能被隐藏在汇编代码的更底层的指令中，不一定会直接出现在你查看的汇编代码中。</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>【ES】springboot集成ES</title>
    <url>/2024/04/19/%E3%80%90ES%E3%80%91springboot%E9%9B%86%E6%88%90ES/</url>
    <content><![CDATA[<hr>
<h1 id="1-去Spring官方文档确认版本兼容性"><a href="#1-去Spring官方文档确认版本兼容性" class="headerlink" title="1. 去Spring官方文档确认版本兼容性"></a>1. 去Spring官方文档确认版本兼容性</h1><p><img src="/2024/04/19/%E3%80%90ES%E3%80%91springboot%E9%9B%86%E6%88%90ES/pic1.png"><br>这一版的文档里没有给出springboot的版本对应，但我在一个博主的文章里看到的es8.0以前的官方文档中就有给出来，所以还需要再去寻找spring framework和springboot的对应关系？？？<br><img src="/2024/04/19/%E3%80%90ES%E3%80%91springboot%E9%9B%86%E6%88%90ES/pic2.png"></p>
<p>还有有个疑问，因为我选择的es依赖包是spring-boot-starter-data-elasticsearch，但官方文档里只给出了Spring Data Elasticsearch的信息，而这两者的版本对应关系我目前只能从加载的依赖包中找到，或许有其他的办法？（还请广大网友指点一下）<br><img src="/2024/04/19/%E3%80%90ES%E3%80%91springboot%E9%9B%86%E6%88%90ES/pic3.png"></p>
<h1 id="2-es的安装和配置"><a href="#2-es的安装和配置" class="headerlink" title="2. es的安装和配置"></a>2. es的安装和配置</h1><p>找到合适的es版本后，就可以去es官网进行下载安装了<br><a href="https://blog.csdn.net/weixin_48453504/article/details/137818042?spm=1001.2014.3001.5501">ES安装</a></p>
<h1 id="3-添加依赖"><a href="#3-添加依赖" class="headerlink" title="3. 添加依赖"></a>3. 添加依赖</h1><p>安装好es后就可以添加spring boot starter data elasticsearch的依赖包了<br>spring boot starter data elasticsearch的依赖包中集成了Spring Data Elasticsearch<br><img src="/2024/04/19/%E3%80%90ES%E3%80%91springboot%E9%9B%86%E6%88%90ES/pic4.png"><br>如下，我的springboot版本是3.1.7<br><img src="/2024/04/19/%E3%80%90ES%E3%80%91springboot%E9%9B%86%E6%88%90ES/pic5.png"></p>
<p><img src="/2024/04/19/%E3%80%90ES%E3%80%91springboot%E9%9B%86%E6%88%90ES/pic6.png"></p>
<h1 id="4-修改application-properties文件"><a href="#4-修改application-properties文件" class="headerlink" title="4. 修改application.properties文件"></a>4. 修改application.properties文件</h1><p><img src="/2024/04/19/%E3%80%90ES%E3%80%91springboot%E9%9B%86%E6%88%90ES/pic7.png"></p>
<h1 id="5-给实体类添加注解"><a href="#5-给实体类添加注解" class="headerlink" title="5. 给实体类添加注解"></a>5. 给实体类添加注解</h1><p><img src="/2024/04/19/%E3%80%90ES%E3%80%91springboot%E9%9B%86%E6%88%90ES/pic8.png"></p>
<h1 id="6-测试"><a href="#6-测试" class="headerlink" title="6. 测试"></a>6. 测试</h1><p><img src="/2024/04/19/%E3%80%90ES%E3%80%91springboot%E9%9B%86%E6%88%90ES/pic9.png"><br><img src="/2024/04/19/%E3%80%90ES%E3%80%91springboot%E9%9B%86%E6%88%90ES/pic10.png"></p>
<p>过程遇到太多坑了，尤其要注意<strong>版本适配性</strong>问题！！！</p>
<p>参考了很多网友的解决方案，感谢！</p>
]]></content>
      <categories>
        <category>ES</category>
      </categories>
      <tags>
        <tag>ES</tag>
      </tags>
  </entry>
  <entry>
    <title>【Redis】过期删除策略</title>
    <url>/2024/05/06/%E3%80%90Redis%E3%80%91%E8%BF%87%E6%9C%9F%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<hr>
<ol>
<li>定时删除</li>
</ol>
<p>给每个存入redis的数据设置一个过期删除事件，过期时间一到，就自动触发事件，删除该数据</p>
<ol start="2">
<li>懒惰删除</li>
</ol>
<p>只有当使用到数据的时候，才判断该数据是否过期，过期则删除，否则，不做处理。</p>
<ol start="3">
<li>定期删除</li>
</ol>
<p>redis定期从过期字典里随机抽取一定数量（可以设置）的数据进行判断，如果超过一定比例（可以设置）的数据都过期了，则再进行一次随机检验，直到过期数据所占比例未达到设定值或者检验时间超时了。</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>【Redis】缓存问题</title>
    <url>/2024/05/06/%E3%80%90Redis%E3%80%91%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<hr>
<ol>
<li>缓存击穿</li>
</ol>
<p>含义：热点数据过期被删除后，大量用户对热点数据的访问无法直接通过内存数据库得到，进而转向访问硬盘数据库，对硬盘数据库造成极大的压力，影响性能。<br>解决办法：建立可靠的redis集群、设置互斥锁、不对热点数据设置过期时间</p>
<ol start="2">
<li>缓存雪崩</li>
</ol>
<p>含义：内存数据库宕机或者大量数据在同一时间段内过期。用户对这些数据的访问无法通过走内存数据库得到，必须访问硬盘数据库。<br>解决办法：建立可靠的redis集群、设置互斥锁、设置离散的过期时间</p>
<ol start="3">
<li>缓存穿透</li>
</ol>
<p>含义：用户访问数据库中不存在的数据</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>【Redis】缓存一致性问题</title>
    <url>/2024/05/07/%E3%80%90Redis%E3%80%91%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<hr>
<p>可以有多种方式来对缓存和数据库进行同步：先修改缓存再修改数据库、先修改数据库再修改缓存、先删除缓存再修改数据库、先修改数据库再删除缓存</p>
<p>redis选择通过先修改数据库再删除缓存来确保redis的缓存和数据库内容是一致的</p>
<p>但是删除缓存如果失败的话，就会造成下一次访问到的数据是脏数据。因此就需要一些机制来确保缓存删除成功。如：消息队列、订阅binlog</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>【Redis】集群</title>
    <url>/2024/05/07/%E3%80%90Redis%E3%80%91%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<hr>
<p>redis通过采取一主多从的模式形成一个集群，以增强系统的可靠性和安全性</p>
<p>主服务器：负责处理读写请求，与从服务器建立连接后就将数据以全量复制的形式同步给从服务器，后续数据的更新以基于长连接的命令完成</p>
<p>从服务器：负责处理读请求，分散主服务器的压力</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>【Redis】集群-哨兵机制</title>
    <url>/2024/05/08/%E3%80%90Redis%E3%80%91%E9%9B%86%E7%BE%A4-%E5%93%A8%E5%85%B5%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<hr>
<p>redis通过哨兵机制来实现<strong>故障转移</strong></p>
<p>哨兵的监测机制：<br>哨兵有多个，并且会每隔一段时间通过ping命令和主服务器建立连接来判断主服务器是否出现故障。当有一个哨兵<strong>主观判定</strong>主服务器出现故障下线后，该哨兵会请求其他哨兵再进行一次判断，如果超过一定比例的哨兵都主观认定该主服务器下线，则redis<strong>客观判定</strong>该主服务器下线。</p>
<p>新的主服务器选拔流程：<br>当旧主服务器被客观判定下线后，哨兵们会选出一个leader，一般由第一个主观判定主服务器下线的哨兵当选。<br>leader通过以下规则从从服务器中选出新的主服务器：1. <strong>优先级</strong> 2.<strong>从服务器复制主服务器数据的进程</strong> 3.<strong>从服务器的id号</strong><br>选出新的主服务器后，哨兵就要通过slave命令将新的主服务器的ip地址和端口号告知所有从服务器，让从服务器与新的主服务器建立连接。并且还要通过<strong>发布者&#x2F;订阅模式</strong>将该地址发布到哨兵的频道上，以便客户端能够重新和新的主服务器建立连接<br>当旧的主服务器重新上线后，哨兵也要将该主服务器的地址告知它</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>【Redis】集群-脑裂现象</title>
    <url>/2024/05/08/%E3%80%90Redis%E3%80%91%E9%9B%86%E7%BE%A4-%E8%84%91%E8%A3%82%E7%8E%B0%E8%B1%A1/</url>
    <content><![CDATA[<hr>
<p>当出现主从故障转移，但客户端并不知道或是延迟了一段时间才知道的情况下，就发生了脑裂现象</p>
<p>发生原因：当主服务被判定客观下线后，但客户端并没有及时被通知到并与新的主服务器建立连接。这就造成了客户端还是将要写入的数据发送给旧主服务器。然而当该旧主服务器重新上线后，它不再是主服务器，而是成为了从服务器，需要全量复制新的主服务器的数据，而这些全量复制的数据会覆盖原先已有的数据。这就造成了这一段时间内客户端写入的数据丢失。</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>【Redis】事务</title>
    <url>/2024/05/10/%E3%80%90Redis%E3%80%91%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<hr>
<p>Redis确保在事务内的命令是<strong>顺序</strong>、<strong>一次性</strong>、<strong>不被中断</strong>地执行的</p>
<p>Redis以multi（）开始一个事务，以execute（）执行一个事务</p>
<p>Redis是<strong>单线程执行任务</strong>的，因此，当它开始执行一个事务时，就会一直到该事务结束才会去处理其他请求，期间不会被其他线程干扰</p>
<p>Redis事务内部<strong>不支持回滚</strong>，确保了内部简单、轻便</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>【Redis】大key对持久化的影响</title>
    <url>/2024/05/10/%E3%80%90Redis%E3%80%91%E5%A4%A7key%E5%AF%B9%E6%8C%81%E4%B9%85%E5%8C%96%E7%9A%84%E5%BD%B1%E5%93%8D/</url>
    <content><![CDATA[<hr>
<p>redis大key是指占用内存过大的key</p>
<p>大key可能会对以下持久化方式产生影响：</p>
<ol>
<li><strong>always</strong>的AOF持久化方式</li>
<li>发生<strong>写时复制</strong>时</li>
</ol>
<p>产生的影响可能是<strong>网络阻塞</strong>、<strong>客户端请求阻塞</strong></p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>【Mysql】索引</title>
    <url>/2024/05/11/%E3%80%90Mysql%E3%80%91%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<hr>
<h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><h3 id="按个数"><a href="#按个数" class="headerlink" title="按个数"></a>按个数</h3><p>单列索引、联合索引</p>
<h3 id="按物理存储"><a href="#按物理存储" class="headerlink" title="按物理存储"></a>按物理存储</h3><p>主键索引、二级索引</p>
<h3 id="按数据结构"><a href="#按数据结构" class="headerlink" title="按数据结构"></a>按数据结构</h3><p>B+树索引、B树索引</p>
<h2 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h2><ol>
<li>对索引字段使用函数、表达式计算；发生隐式类型转换</li>
<li>左模糊、左右模糊匹配</li>
<li>未遵循最左匹配原则（针对聚簇索引）</li>
</ol>
<h2 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h2><ol>
<li>避免索引失效</li>
<li>避免回表，如果可以，覆盖索引</li>
</ol>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
  </entry>
  <entry>
    <title>【Mysql】索引-索引结构</title>
    <url>/2024/05/13/%E3%80%90Mysql%E3%80%91%E7%B4%A2%E5%BC%95-%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<hr>
<h2 id="为什么Innodb存储引擎使用B-树作为存储索引的数据结构"><a href="#为什么Innodb存储引擎使用B-树作为存储索引的数据结构" class="headerlink" title="为什么Innodb存储引擎使用B+树作为存储索引的数据结构"></a>为什么Innodb存储引擎使用B+树作为存储索引的数据结构</h2><ol>
<li>查询效率高</li>
</ol>
<p>因为B+树的非叶子节点只存储索引值而不存储数据值，所以每一个节点能够存储更多的值，进而整个树就呈现一种“矮胖”的感觉。而树的查询效率又跟树高呈正相关，树高越小，查询效率越高。所以B+树的查询效率高。</p>
<ol start="2">
<li>支持范围查询</li>
</ol>
<p>B+树的叶子节点存储所有索引对应的value的数据，并以链表（单向&#x2F;双向）的形式串联起来，</p>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
  </entry>
  <entry>
    <title>【Mysql】count函数</title>
    <url>/2024/05/13/%E3%80%90Mysql%E3%80%91count%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<hr>
<p><strong>count（参数）用来统计符合查询条件的记录中参数值不为null的条数</strong></p>
<p>性能排序：<br>count（<em>）&#x3D; count（1）&gt; count（主键）&gt; count（普通字段）<br>count（</em>）实际上优化器会将其转换成count（0），在查询效率上等同于count（1），因为二者都是恒为非null的，因此，只要判断查询出来的记录条数即是最终查询结果<br>count（主键）在将符合条件的记录通过走索引表查询出来后还要判断记录的主键值是否为空。<br>count（普通字段）由于没有建立索引，所以需要走全表扫描，查询效率最差。</p>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
  </entry>
  <entry>
    <title>【Mysql】事务</title>
    <url>/2024/05/14/%E3%80%90Mysql%E3%80%91%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<hr>
<h2 id="四大特性"><a href="#四大特性" class="headerlink" title="四大特性"></a>四大特性</h2><ol>
<li>原子性 （由回滚机制保证）</li>
<li>隔离性 （由事务的隔离级别保证）</li>
<li>持久性 （由日志保证）</li>
<li>一致性 （由前三者共同保证）</li>
</ol>
<h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><p>隔离脏读、不可重复读以及幻读三种可能出现的问题</p>
<h3 id="读未提交"><a href="#读未提交" class="headerlink" title="读未提交"></a>读未提交</h3><p>什么都避免不了</p>
<h3 id="读提交"><a href="#读提交" class="headerlink" title="读提交"></a>读提交</h3><p>可以避免脏读</p>
<h3 id="可重复读"><a href="#可重复读" class="headerlink" title="可重复读"></a>可重复读</h3><p>可以避免脏读、不可重复读以及很大程度上避免幻读</p>
<h3 id="串行化"><a href="#串行化" class="headerlink" title="串行化"></a>串行化</h3><p>全可以避免</p>
<h2 id="MVCC（多版本并发控制）"><a href="#MVCC（多版本并发控制）" class="headerlink" title="MVCC（多版本并发控制）"></a>MVCC（多版本并发控制）</h2><p>在读提交和可重复读隔离级别下，都采用了多版本并发控制的方式来实现事务之间的隔离，MVCC是通过Read View来实现的</p>
<p>Read View中存储了<strong>当前活跃（创建了的但还未提交）事务的id列表</strong>、<strong>活跃事务中最小的id</strong>、<strong>活跃事务中最大的id+1（下一个新建的事务id）</strong>、<strong>当前事务id</strong></p>
<p>每一条数据记录中还有两列隐藏列，分别是<strong>最近一次修改该条记录的事务id</strong>以及<strong>undo指针</strong></p>
<h3 id="读提交："><a href="#读提交：" class="headerlink" title="读提交："></a>读提交：</h3><p>在每一次查询前都创建一个Read View，如果所查询的这条记录中最近一次修改的事务id值小于Read View中活跃事务id列表中最小的id值，说明查询到的这条数据是已经在之前提交过的了，因此可以读取。反之，则要通过undo指针寻找到之前的记录，直到该条记录的最近一次修改的事务id值小于活跃事务id列表中最小的id值</p>
<h3 id="可重复读-1"><a href="#可重复读-1" class="headerlink" title="可重复读"></a>可重复读</h3><p>只在事务开始阶段创建一个Read View，期间不管发生多少次查询，都使用的是一开始创建的这个Read View。其余规则同读提交一样。</p>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
  </entry>
  <entry>
    <title>【RPC】简易版rpc框架</title>
    <url>/2024/05/14/%E3%80%90RPC%E3%80%91%E7%AE%80%E6%98%93%E7%89%88rpc%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<hr>
<p>照着代码自己敲了一遍，能理解的不多，疏通了一下RPC的宏观过程</p>
<p>一个RPC的实现需要三个主体：<strong>服务提供者、服务调用者、注册中心</strong></p>
<ol>
<li>服务调用者发送HTTP请求给服务提供者<ol>
<li>首先需要将封装好的HTTP请求对象序列化</li>
<li>将序列化的对象发送出去</li>
</ol>
</li>
<li>服务提供者对HTTP请求做处理，将处理结果发送HTTP响应给服务调用者<ol>
<li>对收到的序列化字节数组进行反序列化</li>
<li>对反序列化后的HTTP请求进行处理（根据接收到的参数通过<strong>本地注册服务器</strong>将获取对应的服务类，并通过<strong>反射</strong>调用请求方法）</li>
<li>将处理结果封装成响应对象</li>
<li>对响应对象进行序列化</li>
<li>将序列化后的字节数组发送给服务请求者</li>
</ol>
</li>
<li>服务请求者提取响应对象中的数据<ol>
<li>将收到的序列化字节数组进行反序列化</li>
<li>根据业务逻辑对响应对象中的数据进行相关处理</li>
</ol>
</li>
</ol>
<p>服务调用者怎么知道服务提供者的ip地址和端口呢？<br>这就是注册中心该干的事了</p>
<p>如果有多个服务提供者，那服务调用者应该向哪一个提供者发送请求呢？<br>这就是负载均衡机制的事了</p>
]]></content>
      <categories>
        <category>RPC</category>
      </categories>
  </entry>
  <entry>
    <title>【Mysql】锁</title>
    <url>/2024/05/15/%E3%80%90Mysql%E3%80%91%E9%94%81/</url>
    <content><![CDATA[<hr>
<h2 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h2><p>对行记录上锁，但本质上是对行记录的<strong>索引</strong>上锁</p>
<h3 id="记录锁"><a href="#记录锁" class="headerlink" title="记录锁"></a>记录锁</h3><p>对一条记录上锁，被上锁的记录不能被删除、修改</p>
<h3 id="间隙锁"><a href="#间隙锁" class="headerlink" title="间隙锁"></a>间隙锁</h3><p>对一个范围内的记录上锁，范围内的数据不能被删除、修改；增加新的数据到范围内</p>
<h3 id="next-key-lock"><a href="#next-key-lock" class="headerlink" title="next-key lock"></a>next-key lock</h3><p>记录锁+间隙锁，左开右闭</p>
<ul>
<li>一般的select语句并不会对记录上锁，因为innodb默认的隔离级别是可重复读，采用<strong>快照读</strong>的形式，通过MVCC做事务的隔离。</li>
<li>只有当使用<strong>select … for update</strong>语句的时候，采取的是<strong>当前读</strong>的形式，会对范围内的数据加next-key lock。但在一些特殊情况下，next-key lock会退化成间隙锁或记录锁</li>
</ul>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
  </entry>
  <entry>
    <title>【Mysql】锁-死锁</title>
    <url>/2024/05/15/%E3%80%90Mysql%E3%80%91%E9%94%81-%E6%AD%BB%E9%94%81/</url>
    <content><![CDATA[<hr>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>两个或两个以上的事务存在一个互相持有对方想要获得的锁且同时又请求获得对方持有的锁的循环链</p>
<h2 id="产生的必要条件"><a href="#产生的必要条件" class="headerlink" title="产生的必要条件"></a>产生的必要条件</h2><p>互斥、不可剥夺、请求和保持、循环等待</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ol>
<li>为每个事务设置一个定时器，超时则回滚该事务，释放拥有的锁资源</li>
<li>监测死锁，释放死锁关系中某一个事务所拥有的锁资源</li>
</ol>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
  </entry>
  <entry>
    <title>【Mysql】慢查询</title>
    <url>/2024/05/16/%E3%80%90Mysql%E3%80%91%E6%85%A2%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<hr>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>当一条查询语句的执行时间超出了设定的查询时间，就发生了慢查询</p>
<h2 id="排查与解决办法"><a href="#排查与解决办法" class="headerlink" title="排查与解决办法"></a>排查与解决办法</h2><h3 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h3><pre><code>   可以通过查询慢查询日志得知是否发生了慢查询
</code></pre>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><pre><code>  1. 优化查询语句
     1. 减少查询不必要的列（尽量避免使用select *）
     2. 避免联表查询
  2. 优化索引
     1. 前缀索引优化
     2. 覆盖索引优化
     3. 避免索引失效
</code></pre>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
  </entry>
  <entry>
    <title>【Mysql】日志</title>
    <url>/2024/05/16/%E3%80%90Mysql%E3%80%91%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<hr>
<h2 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>记录事务执行操作前的数据，用于事务的回滚操作，确保了事务的<strong>原子性</strong>。同时也应用于<strong>MVCC</strong>中定位查询语句可见的记录</p>
<h3 id="运用"><a href="#运用" class="headerlink" title="运用"></a>运用</h3><ol>
<li>insert语句 ：undo log就记录下insert插入记录的主键id，这样回滚时通过id可以将这条记录删除</li>
<li>update语句：记录下update所操作的记录的字段的旧值，回滚时，恢复旧值即可</li>
<li>delete语句：记录下delete操作的记录，回滚时，insert该条记录</li>
</ol>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>每一条undo log记录会先保存至buffer pool中的undo log页面，时机合适（间隔一段时间）将undo log页面刷回磁盘</p>
<h2 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>因为事务提交后，修改的数据是保存在buffer pool中的数据页当中，也就是脏页，但因为IO耗时的原因，脏页并不会马上刷盘。因此，在这期间，如果数据据崩溃，就会造成提交的事务中对数据的修改的丢失。所以，引入了redo log，将每一次提交的事务对数据的修改保存在redo log中，redo log会保存至redo log buffer当中，根据一定的规则将redo log以<strong>顺序写</strong>的形式写回磁，确保了事务提交后的<strong>持久性</strong></p>
<h3 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h3><p>磁盘中存放redo log的文件有大小限制，当文件满时，就需要对没用的数据进行覆盖。而数据是否有用则取决于对应的数据页（脏页）是否落盘，对那些已经落盘的数据可以清理，避免文件不够用</p>
<h2 id="bin-log"><a href="#bin-log" class="headerlink" title="bin log"></a>bin log</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>bin log存储了所有数据表结构变更和数据表数据修改的操作，主要用于主从复制和备份恢复</p>
<h3 id="注意点-2"><a href="#注意点-2" class="headerlink" title="注意点"></a>注意点</h3><p>bin log采取的是追加写的备份形式，一个bin log文件写满了，就再新建一个，也正因此，bin log保存了数据库中所有数据变更的内容，也因此可以用于主从复制的全量复制以及备份恢复</p>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
  </entry>
  <entry>
    <title>【RPC】mock模拟对象</title>
    <url>/2024/05/16/%E3%80%90RPC%E3%80%91mock%E6%A8%A1%E6%8B%9F%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<hr>
<h2 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h2><p>实际开发中可能出现远程服务在维护暂时访问不了的情况出现，利用mock模拟调用真实的远程服务可以便于接口的测试、调试、开发</p>
<h2 id="怎么实现"><a href="#怎么实现" class="headerlink" title="怎么实现"></a>怎么实现</h2><p>利用动态代理技术生成接口实现类的对象，并在处理器中重写相关的逻辑，返回特定的值</p>
<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>根据传入的参数让JVM自动实现静态代理部分的代码，也就是动态生成了接口的实现类</p>
<ol>
<li><p>重写invocationHandler中的invoke方法，可以根据method的返回类型来给出要返回的默认值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="comment">// 根据方法的返回值类型，生成特定的默认值对象</span></span><br><span class="line">    Class&lt;?&gt; methodReturnType = method.getReturnType();</span><br><span class="line">    <span class="comment">//        log.info(&quot;mock invoke &#123;&#125;&quot;, method.getName());</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> getDefaultObject(methodReturnType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Object <span class="title function_">getDefaultObject</span><span class="params">(Class&lt;?&gt; type)</span>&#123;</span><br><span class="line">    <span class="comment">// 基本类型</span></span><br><span class="line">    <span class="keyword">if</span>(type.isPrimitive())&#123;</span><br><span class="line">        <span class="keyword">if</span>(type == <span class="type">boolean</span>.class)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type == <span class="type">short</span>.class)&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">short</span>)<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type == <span class="type">int</span>.class)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type == <span class="type">long</span>.class)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对象类型</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后就可以通过Proxy.newProxyInstance()方法依次传入要实现的类的加载器classLoader、类数组、自定义的处理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getMockProxy</span><span class="params">(Class&lt;T&gt; serviceClass)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (T)Proxy.newProxyInstance(</span><br><span class="line">            serviceClass.getClassLoader(),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;serviceClass&#125;,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">MockServiceProxy</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>RPC</category>
      </categories>
  </entry>
  <entry>
    <title>【Go】helloworld</title>
    <url>/2024/05/30/%E3%80%90Go%E3%80%91helloworld/</url>
    <content><![CDATA[<hr>
<p>Go的主函数声明需要在文件头处声明包是main包，这与真实的文件名helloworld.go并不冲突<br><img src="https://cdn.nlark.com/yuque/0/2024/png/43333018/1717078682822-50470808-4ccf-49b4-b2df-45a169841229.png#averageHue=%23383b40&clientId=udd58d072-7818-4&from=paste&height=55&id=u40876ef5&originHeight=82&originWidth=421&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=3906&status=done&style=none&taskId=ue57a6aec-7057-4dd6-994d-8002e24f723&title=&width=280.6666666666667" alt="image.png"><br>一个包下只能有一个主函数<br><img src="https://cdn.nlark.com/yuque/0/2024/png/43333018/1717078942223-03aaa2e4-ed88-4ff0-8eb8-dbe2456cfdfb.png#averageHue=%232e333b&clientId=udd58d072-7818-4&from=paste&height=90&id=u18a84a61&originHeight=135&originWidth=940&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=14730&status=done&style=none&taskId=u498e0a63-d7a5-49ca-bc43-e7764a9b77d&title=&width=626.6666666666666" alt="image.png"><br>这样的话这一个包下如果有很多函数，这些函数都得在唯一的一个main函数里头测试吗？<br><img src="https://cdn.nlark.com/yuque/0/2024/png/43333018/1717078574914-c0f47c1d-db35-46db-97e4-cda3e69c97ef.png#averageHue=%231e2023&clientId=udd58d072-7818-4&from=paste&height=377&id=ufd0590db&originHeight=566&originWidth=1461&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=51690&status=done&style=none&taskId=ub80a1941-4920-4b57-b4f6-74a57fb3785&title=&width=974" alt="image.png"></p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
  </entry>
  <entry>
    <title>【Go】基本变量声明</title>
    <url>/2024/05/30/%E3%80%90Go%E3%80%91%E5%9F%BA%E6%9C%AC%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E/</url>
    <content><![CDATA[<hr>
<p>Go的声明变量的方式相比Java简单了很多</p>
<ol>
<li>带var 和 变量类型</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2024/png/43333018/1717079205067-0fde02a9-a1ba-4e76-b803-49390641b7c6.png#averageHue=%231f2023&clientId=ua814c986-28b4-4&from=paste&height=169&id=u8bf7c3a6&originHeight=254&originWidth=455&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=14714&status=done&style=none&taskId=u24cbe019-af7e-4d15-8786-a99131cae2d&title=&width=303.3333333333333" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/43333018/1717079220321-1c87d5c6-3464-4717-abcf-4ae829fc2eb9.png#averageHue=%2324262a&clientId=ua814c986-28b4-4&from=paste&height=55&id=u9390a491&originHeight=83&originWidth=134&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=2022&status=done&style=none&taskId=u20701a6e-7c6f-4800-ad56-4967d9814cd&title=&width=89.33333333333333" alt="image.png"><br>int默认值是0</p>
<ol start="2">
<li>带var 但 不带变量类型</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2024/png/43333018/1717079303850-46c1a6f5-0808-4589-b0e1-3d521390caad.png#averageHue=%2323252a&clientId=ua814c986-28b4-4&from=paste&height=49&id=u3b735109&originHeight=73&originWidth=404&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=4835&status=done&style=none&taskId=u2b755801-0158-4c31-b5ec-294afc06f08&title=&width=269.3333333333333" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/43333018/1717079353608-85636d4f-d234-4cfe-9c7e-a4267dc4328b.png#averageHue=%23222327&clientId=ua814c986-28b4-4&from=paste&height=45&id=u4fb46c2b&originHeight=68&originWidth=193&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=2123&status=done&style=none&taskId=u380ba136-0dad-4a67-842d-443638f140b&title=&width=128.66666666666666" alt="image.png"></p>
<ol start="3">
<li>不带var 也 不带变量类型</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2024/png/43333018/1717079245062-d128b18d-22d7-4b38-8d02-c9c9a5158c56.png#averageHue=%231f2125&clientId=ua814c986-28b4-4&from=paste&height=100&id=u566ba826&originHeight=150&originWidth=505&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=13197&status=done&style=none&taskId=uc073cfb8-16f0-43b1-aed9-fe6b373212a&title=&width=336.6666666666667" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/43333018/1717079256192-4e7b712a-99aa-4247-8dfd-638d09d3e02b.png#averageHue=%23222428&clientId=ua814c986-28b4-4&from=paste&height=46&id=ua8c19874&originHeight=69&originWidth=194&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=2501&status=done&style=none&taskId=uf8ddb9a4-7290-4f83-bdab-e6b92e1151d&title=&width=129.33333333333334" alt="image.png"></p>
<ol start="4">
<li>多变量声明</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2024/png/43333018/1717079277414-374c1294-b7ec-4c37-9bf2-0cdafba45b51.png#averageHue=%231e2023&clientId=ua814c986-28b4-4&from=paste&height=293&id=ub52752c1&originHeight=440&originWidth=634&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=29865&status=done&style=none&taskId=u9f1eec7e-b08a-4e4c-8bb2-822ddacdf2b&title=&width=422.6666666666667" alt="image.png"></p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
  </entry>
  <entry>
    <title>【Go】常量</title>
    <url>/2024/06/01/%E3%80%90Go%E3%80%91%E5%B8%B8%E9%87%8F/</url>
    <content><![CDATA[<hr>
<ol>
<li><p>const</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// const 定义常量</span></span><br><span class="line"><span class="keyword">const</span> length = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	SHANGHAI = <span class="number">1</span></span><br><span class="line">	BEIJING  = <span class="number">2</span></span><br><span class="line">	SHENZHEN = <span class="number">3</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p>iota</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// iota初始值为0 逐行递增 只能在常量中声明</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	XIAMEN = <span class="literal">iota</span></span><br><span class="line">	QUANZHOU</span><br><span class="line">	ZHANGZHOU</span><br><span class="line">	FUZHOU</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行结果</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;length = &quot;</span>, length)</span><br><span class="line">	fmt.Println(<span class="string">&quot;SHANGHAI = &quot;</span>, SHANGHAI)</span><br><span class="line">	fmt.Println(<span class="string">&quot;BEIJING = &quot;</span>, BEIJING)</span><br><span class="line">	fmt.Println(<span class="string">&quot;SHENZHEN = &quot;</span>, SHENZHEN)</span><br><span class="line">	fmt.Println(<span class="string">&quot;XIAMEN = &quot;</span>, XIAMEN)</span><br><span class="line">	fmt.Println(<span class="string">&quot;QUANZHOU = &quot;</span>, QUANZHOU)</span><br><span class="line">	fmt.Println(<span class="string">&quot;ZHANGZHOU = &quot;</span>, ZHANGZHOU)</span><br><span class="line">	fmt.Println(<span class="string">&quot;FUZHOU = &quot;</span>, FUZHOU)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2024/06/01/%E3%80%90Go%E3%80%91%E5%B8%B8%E9%87%8F/1.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
  </entry>
  <entry>
    <title>【Go】函数返回值</title>
    <url>/2024/06/01/%E3%80%90Go%E3%80%91%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC/</url>
    <content><![CDATA[<hr>
<ol>
<li><p>单个返回值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单个函数返回值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fun1</span><span class="params">(a <span class="type">string</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;-----fun1-----&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;a = &quot;</span>, a)</span><br><span class="line">	fmt.Println(<span class="string">&quot;b = &quot;</span>, b)</span><br><span class="line"></span><br><span class="line">	c := <span class="number">100</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果<br><img src="/2024/06/01/%E3%80%90Go%E3%80%91%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC/1.png"></p>
</li>
<li><p>多个返回值（不带形参名称）</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多个函数返回值-无形参名称</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fun2</span><span class="params">()</span></span> (<span class="type">string</span>, <span class="type">int</span>) &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;-----fun2-----&quot;</span>)</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>, <span class="number">100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2024/06/01/%E3%80%90Go%E3%80%91%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC/2.png"></p>
</li>
<li><p>多个返回值（带形参名称）</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多个函数返回值-有形参名称</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fun3</span><span class="params">()</span></span> (r1 <span class="type">string</span>, r2 <span class="type">int</span>) &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;-----fun3-----&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;r1 = &quot;</span>, r1)</span><br><span class="line">	fmt.Println(<span class="string">&quot;r2 = &quot;</span>, r2)</span><br><span class="line"></span><br><span class="line">	r1 = <span class="string">&quot;hello world&quot;</span></span><br><span class="line">	r2 = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2024/06/01/%E3%80%90Go%E3%80%91%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC/3.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
  </entry>
  <entry>
    <title>【Go】指针</title>
    <url>/2024/06/02/%E3%80%90Go%E3%80%91%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<hr>
<ol>
<li><p>值传递</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 值传递</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap1</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> temp <span class="type">int</span></span><br><span class="line">	temp = a</span><br><span class="line">	a = b</span><br><span class="line">	b = temp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>引用传递</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用传递</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap2</span><span class="params">(pa *<span class="type">int</span>, pb *<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> temp <span class="type">int</span></span><br><span class="line">	temp = *pa</span><br><span class="line">	*pa = *pb</span><br><span class="line">	*pb = temp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a <span class="type">int</span> = <span class="number">10</span></span><br><span class="line">	<span class="keyword">var</span> b <span class="type">int</span> = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// swap前</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;----初始值----&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;a = &quot;</span>, a)</span><br><span class="line">	fmt.Println(<span class="string">&quot;b = &quot;</span>, b)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 值传递后</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;----值传递后----&quot;</span>)</span><br><span class="line">	swap1(a, b)</span><br><span class="line">	fmt.Println(<span class="string">&quot;a = &quot;</span>, a)</span><br><span class="line">	fmt.Println(<span class="string">&quot;b = &quot;</span>, b)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 引用传递后</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;----引用传递后----&quot;</span>)</span><br><span class="line">	swap2(&amp;a, &amp;b)</span><br><span class="line">	fmt.Println(<span class="string">&quot;a = &quot;</span>, a)</span><br><span class="line">	fmt.Println(<span class="string">&quot;b = &quot;</span>, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试结果<br><img src="/2024/06/02/%E3%80%90Go%E3%80%91%E6%8C%87%E9%92%88/1.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
  </entry>
  <entry>
    <title>【Go】defer</title>
    <url>/2024/06/02/%E3%80%90Go%E3%80%91defer/</url>
    <content><![CDATA[<hr>
<ol>
<li><p>defer的执行顺序（执行到defer关键字时，将该行代码压栈，方法执行结束后，逐个弹栈并执行方法）</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.defer的执行顺序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func1</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;func1 ...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func2</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;func2 ...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func3</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;func3 ...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 测试defer执行顺序</span></span><br><span class="line">	<span class="keyword">defer</span> func1()</span><br><span class="line">	<span class="keyword">defer</span> func2()</span><br><span class="line">	<span class="keyword">defer</span> func3()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果<br><img src="/2024/06/02/%E3%80%90Go%E3%80%91defer/1.png"></p>
</li>
<li><p>defer和return谁先谁后</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. defer和return的先后顺序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deferFunc</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;deferFunc ...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">returnFunc</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;returnFunc ...&quot;</span>)</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testDeferAndReturn</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> deferFunc()</span><br><span class="line">	<span class="keyword">return</span> returnFunc()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 测试defer和return的执行顺序</span></span><br><span class="line">	testDeferAndReturn()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果<br><img src="/2024/06/02/%E3%80%90Go%E3%80%91defer/2.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
  </entry>
  <entry>
    <title>【Go】静态数组</title>
    <url>/2024/06/02/%E3%80%90Go%E3%80%91%E9%9D%99%E6%80%81%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<hr>
<ol>
<li>不赋值</li>
<li>全赋值</li>
<li>部分赋值</li>
<li>参数传递（<strong>值传递、数组长度必须一致</strong>）</li>
</ol>
<p>测试1.2.3</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 1.静态数组</span></span><br><span class="line">	<span class="keyword">var</span> arr1 [<span class="number">5</span>]<span class="type">int</span>                   <span class="comment">// 不赋值</span></span><br><span class="line">	<span class="keyword">var</span> arr2 = [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;  <span class="comment">// 全赋值</span></span><br><span class="line">	<span class="keyword">var</span> arr3 = [<span class="number">10</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125; <span class="comment">// 部分赋值</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 测试</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;----静态数组----&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;arr1:&quot;</span>, arr1)</span><br><span class="line">	fmt.Println(<span class="string">&quot;arr2:&quot;</span>, arr2)</span><br><span class="line">	fmt.Println(<span class="string">&quot;arr3:&quot;</span>, arr3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果<br><img src="/2024/06/02/%E3%80%90Go%E3%80%91%E9%9D%99%E6%80%81%E6%95%B0%E7%BB%84/1.png"></p>
<p>测试4</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试静态数组参数传递</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test2</span><span class="params">(array [5]<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	array[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 1.静态数组</span></span><br><span class="line">	<span class="keyword">var</span> arr1 [<span class="number">5</span>]<span class="type">int</span> <span class="comment">// 不赋值</span></span><br><span class="line">	<span class="keyword">var</span> arr3 = [<span class="number">10</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125; <span class="comment">// 部分赋值</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 测试</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;----静态数组----&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;arr1:&quot;</span>, arr1)</span><br><span class="line">	fmt.Println(<span class="string">&quot;arr3:&quot;</span>, arr3)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 测试值传递</span></span><br><span class="line">	test2(arr1)</span><br><span class="line">	fmt.Println(<span class="string">&quot;----函数调用后----&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;arr1:&quot;</span>, arr1)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试数组长度不一致的参数传递</span></span><br><span class="line">    test2(arr3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>测试值传递结果<br><img src="/2024/06/02/%E3%80%90Go%E3%80%91%E9%9D%99%E6%80%81%E6%95%B0%E7%BB%84/2.png"><br>测试数组长度不一致结果<br><img src="/2024/06/02/%E3%80%90Go%E3%80%91%E9%9D%99%E6%80%81%E6%95%B0%E7%BB%84/3.png"></p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
  </entry>
  <entry>
    <title>【Go】切片</title>
    <url>/2024/06/05/%E3%80%90Go%E3%80%91%E5%88%87%E7%89%87/</url>
    <content><![CDATA[<hr>
<ol>
<li><p>声明变量-》分配空间-》赋值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 声明切片，但不赋值</span></span><br><span class="line"><span class="keyword">var</span> slice1 []<span class="type">int</span> <span class="comment">// 声明切片</span></span><br><span class="line">slice1 = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">3</span>) <span class="comment">// 开辟空间</span></span><br><span class="line">slice1[<span class="number">0</span>] = <span class="number">1</span> <span class="comment">// 赋值</span></span><br><span class="line">slice1[<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line">slice1[<span class="number">2</span>] = <span class="number">3</span></span><br><span class="line">fmt.Println(slice1)</span><br></pre></td></tr></table></figure>
</li>
<li><p>声明变量并分配空间-》赋值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 声明切片并分配空间</span></span><br><span class="line">slice2 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">3</span>) <span class="comment">// 声明并分配空间</span></span><br><span class="line">slice2[<span class="number">0</span>] = <span class="number">1</span> <span class="comment">// 赋值</span></span><br><span class="line">slice2[<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line">slice2[<span class="number">2</span>] = <span class="number">3</span></span><br><span class="line">fmt.Println(slice2)</span><br></pre></td></tr></table></figure>
</li>
<li><p>截取</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.截取 [startIndex:endIndex) 左闭右开</span></span><br><span class="line">slice3 := slice2[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">fmt.Println(slice3)</span><br><span class="line"><span class="comment">// slice3指向slice2所在内存空间的起始地址处</span></span><br><span class="line">slice3[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">fmt.Println(<span class="string">&quot;slice2 :&quot;</span>, slice2)</span><br></pre></td></tr></table></figure>
<p>测试结果<br><img src="/2024/06/05/%E3%80%90Go%E3%80%91%E5%88%87%E7%89%87/1.png"></p>
</li>
<li><p>复制 （若没有分配内存空间，则无法进行有效复制）</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4.复制 需要分配内存空间才能有效复制</span></span><br><span class="line"><span class="keyword">var</span> slice4 []<span class="type">int</span></span><br><span class="line">fmt.Println(<span class="string">&quot;----未分配内存空间的复制----&quot;</span>)</span><br><span class="line"><span class="built_in">copy</span>(slice4, slice2)</span><br><span class="line">fmt.Println(<span class="string">&quot;slice4 :&quot;</span>, slice4)</span><br><span class="line">fmt.Println(<span class="string">&quot;----分配完内存空间的复制----&quot;</span>)</span><br><span class="line">slice4 = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">len</span>(slice2))</span><br><span class="line"><span class="built_in">copy</span>(slice4, slice2)</span><br><span class="line">fmt.Println(<span class="string">&quot;slice4 :&quot;</span>, slice4)</span><br></pre></td></tr></table></figure>
<p>测试结果<br><img src="/2024/06/05/%E3%80%90Go%E3%80%91%E5%88%87%E7%89%87/2.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
  </entry>
  <entry>
    <title>【Go】Map</title>
    <url>/2024/06/05/%E3%80%90Go%E3%80%91Map/</url>
    <content><![CDATA[<hr>
<ol>
<li><p>创建map-》分配空间-》赋值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 先声明变量，然后开辟空间，最后赋值</span></span><br><span class="line"><span class="keyword">var</span> map1 <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span></span><br><span class="line">map1 = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>, <span class="number">10</span>)</span><br><span class="line">map1[<span class="number">1</span>] = <span class="string">&quot;php&quot;</span></span><br><span class="line">map1[<span class="number">2</span>] = <span class="string">&quot;python&quot;</span></span><br><span class="line">map1[<span class="number">3</span>] = <span class="string">&quot;java&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建map同时分配空间-》赋值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 声明变量的同时分配空间，然后赋值</span></span><br><span class="line">map2 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>, <span class="number">10</span>)</span><br><span class="line">map2[<span class="number">1</span>] = <span class="string">&quot;Jordan&quot;</span></span><br><span class="line">map2[<span class="number">2</span>] = <span class="string">&quot;Kobe&quot;</span></span><br><span class="line">map2[<span class="number">3</span>] = <span class="string">&quot;xxx&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建map同时分配空间同时赋值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3. 声明变量同时分配空间同时赋值</span></span><br><span class="line">map3 := <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>&#123;</span><br><span class="line">	<span class="number">1</span>: <span class="string">&quot;Nike&quot;</span>,</span><br><span class="line">	<span class="number">2</span>: <span class="string">&quot;Adidas&quot;</span>,</span><br><span class="line">	<span class="number">3</span>: <span class="string">&quot;Anta&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试1-3结果<br><img src="/2024/06/05/%E3%80%90Go%E3%80%91Map/1.png"></p>
</li>
<li><p>增删改查+函数修改</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// map是引用类型，所以形参是引用传递</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(cityMap <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span></span> &#123;</span><br><span class="line">	cityMap[<span class="string">&quot;Fujian&quot;</span>] = <span class="string">&quot;Fuzhou&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 基本操作-CURD</span></span><br><span class="line">	map1 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 1. 增</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;----增----&quot;</span>)</span><br><span class="line">	map1[<span class="string">&quot;Fujian&quot;</span>] = <span class="string">&quot;Fuzhou&quot;</span></span><br><span class="line">	map1[<span class="string">&quot;Guangdong&quot;</span>] = <span class="string">&quot;Guangzhou&quot;</span></span><br><span class="line">	map1[<span class="string">&quot;Zhejiang&quot;</span>] = <span class="string">&quot;Hangzhou&quot;</span></span><br><span class="line">	fmt.Println(map1)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 2. 删</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;----删----&quot;</span>)</span><br><span class="line">	<span class="built_in">delete</span>(map1, <span class="string">&quot;Zhejiang&quot;</span>)</span><br><span class="line">	fmt.Println(map1)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 3. 改</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;----改----&quot;</span>)</span><br><span class="line">	map1[<span class="string">&quot;Fujian&quot;</span>] = <span class="string">&quot;XiaMen&quot;</span></span><br><span class="line">	fmt.Println(map1)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 4. 查</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;----查----&quot;</span>)</span><br><span class="line">	<span class="keyword">for</span> key, value := <span class="keyword">range</span> map1 &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;key:&quot;</span>, key, <span class="string">&quot;value:&quot;</span>, value)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 5. 通过函数修改map值</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;----通过引用传递修改map值----&quot;</span>)</span><br><span class="line">	update(map1)</span><br><span class="line">	fmt.Println(map1)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试结果<br><img src="/2024/06/05/%E3%80%90Go%E3%80%91Map/2.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
  </entry>
  <entry>
    <title>【Go】interface</title>
    <url>/2024/06/05/%E3%80%90Go%E3%80%91interface/</url>
    <content><![CDATA[<hr>
<h2 id="golang中的interface类型本质上是指针"><a href="#golang中的interface类型本质上是指针" class="headerlink" title="golang中的interface类型本质上是指针"></a>golang中的interface类型本质上是指针</h2><ol>
<li><p>实现多态</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// interface本质是一个指针</span></span><br><span class="line"><span class="keyword">type</span> Animal <span class="keyword">interface</span> &#123;</span><br><span class="line">	Sleep()</span><br><span class="line">	GetType() <span class="type">string</span></span><br><span class="line">	GetColor() <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cat、Dog 子类实现接口中的全部方法</span></span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">	Type  <span class="type">string</span></span><br><span class="line">	Color <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">	Type  <span class="type">string</span></span><br><span class="line">	Color <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Cat)</span></span> Sleep() &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Cat is sleeping&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Dog)</span></span> Sleep() &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Dog is sleeping&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Cat)</span></span> GetType() <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> this.Type</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Dog)</span></span> GetType() <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> this.Type</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Cat)</span></span> GetColor() <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> this.Color</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Dog)</span></span> GetColor() <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> this.Color</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多态-》父类变量(指针)指向子类变量(引用)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ShowAnimal</span><span class="params">(animal Animal)</span></span> &#123;</span><br><span class="line">	animal.Sleep()</span><br><span class="line">	fmt.Println(<span class="string">&quot;Type: &quot;</span>, animal.GetType())</span><br><span class="line">	fmt.Println(<span class="string">&quot;Color: &quot;</span>, animal.GetColor())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 子类对象</span></span><br><span class="line">	cat := Cat&#123;</span><br><span class="line">		Type:  <span class="string">&quot;Cat&quot;</span>,</span><br><span class="line">		Color: <span class="string">&quot;White&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	dog := Dog&#123;</span><br><span class="line">		Type:  <span class="string">&quot;Dog&quot;</span>,</span><br><span class="line">		Color: <span class="string">&quot;Yellow&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	ShowAnimal(&amp;cat)</span><br><span class="line">	ShowAnimal(&amp;dog)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>测试结果<br><img src="/2024/06/05/%E3%80%90Go%E3%80%91interface/1.png"></p>
</li>
<li><p>万能接口interface{}，所有基本数据类型包括struct都实现了它（类似Java中的Object），因此可以用来接参并实现反射</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 空接口也称为万能接口，基本数据类型如int、string、float、struct等都实现了它</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myFunc</span><span class="params">(arg <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;myFunc is used...&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;arg is &quot;</span>, arg)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 断言机制</span></span><br><span class="line">	value, ok := arg.(<span class="type">int</span>) <span class="comment">// 判断接到的参数类型是否为int</span></span><br><span class="line">	<span class="keyword">if</span> ok &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;arg type is int and&quot;</span>, <span class="string">&quot;value is &quot;</span>, value)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;arg is not int and&quot;</span>, <span class="string">&quot;value is &quot;</span>, value)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Man <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 引用任意数据类型</span></span><br><span class="line">	myFunc(<span class="number">1</span>)</span><br><span class="line">	myFunc(<span class="string">&quot;111&quot;</span>)</span><br><span class="line">	myFunc(<span class="string">&quot;1.11&quot;</span>)</span><br><span class="line">	myFunc(Man&#123;<span class="string">&quot;cx&quot;</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>测试结果<br><img src="/2024/06/05/%E3%80%90Go%E3%80%91interface/2.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
  </entry>
  <entry>
    <title>【Go】json</title>
    <url>/2024/06/06/%E3%80%90Go%E3%80%91json/</url>
    <content><![CDATA[<hr>
<p><strong>注意点：变量命名时大小写问题！</strong></p>
<ol>
<li>编码：struct &#x3D;&#x3D;》json</li>
<li>解码：json &#x3D;&#x3D;》 struct</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个结构体</span></span><br><span class="line"><span class="keyword">type</span> Music <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name   <span class="type">string</span> <span class="string">`json:&quot;名称&quot;`</span> <span class="comment">// 字段大小写命名问题！！！</span></span><br><span class="line">	Singer <span class="type">string</span> <span class="string">`json:&quot;歌手&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建结构体变量并赋值</span></span><br><span class="line">	music := Music&#123;<span class="string">&quot;关忆北&quot;</span>, <span class="string">&quot;宋冬野&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 编码：结构体-》json字符串</span></span><br><span class="line">	myMusic, err := json.Marshal(music) <span class="comment">// 结构体-》字节数组</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(myMusic)</span><br><span class="line">		fmt.Println(<span class="type">string</span>(myMusic)) <span class="comment">// 字节数组-》json字符串</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 解码：json字符串-》结构体</span></span><br><span class="line">	music2 := Music&#123;&#125;</span><br><span class="line">	err = json.Unmarshal(myMusic, &amp;music2)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(music2)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>测试结果<br><img src="/2024/06/06/%E3%80%90Go%E3%80%91json/1.png"></p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
  </entry>
  <entry>
    <title>【Go】Modules</title>
    <url>/2024/06/06/%E3%80%90Go%E3%80%91Modules/</url>
    <content><![CDATA[<hr>
<ol>
<li><p>先通过go env命令查看相关变量的值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go env</span><br></pre></td></tr></table></figure>
<p><img src="/2024/06/06/%E3%80%90Go%E3%80%91Modules/1.png"></p>
</li>
<li><p>设置GO111MODULE</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go env -w GO111MODULE=on // 启用gomodule</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置GOPROXY</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go env -w GOPROXY=https://goproxy.cn,direct // 使用国内代理</span><br></pre></td></tr></table></figure>
</li>
<li><p>在GOPRIVATE中设置私有库地址</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go env -w GOPRIVATE=XXX</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
  </entry>
  <entry>
    <title>【Go】new和make</title>
    <url>/2024/06/07/%E3%80%90Go%E3%80%91new%E5%92%8Cmake/</url>
    <content><![CDATA[<hr>
<ol>
<li>new是返回一个指向新分配了内存空间并初始化为<strong>零值</strong>的对象的<strong>指针</strong></li>
</ol>
<p><img src="/2024/06/07/%E3%80%90Go%E3%80%91new%E5%92%8Cmake/1.png"></p>
<ol start="2">
<li>make是返回一个新分配了内存并初始化的<strong>对象</strong></li>
</ol>
<p><img src="/2024/06/07/%E3%80%90Go%E3%80%91new%E5%92%8Cmake/2.png"></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// make</span></span><br><span class="line">	object := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line">	fmt.Println(reflect.TypeOf(object)) <span class="comment">// []int</span></span><br><span class="line">	fmt.Println(object)                 <span class="comment">// [0 0 0]</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// new</span></span><br><span class="line">	object2 := <span class="built_in">new</span>(<span class="type">int</span>)</span><br><span class="line">	fmt.Println(reflect.TypeOf(object2)) <span class="comment">// *int</span></span><br><span class="line">	fmt.Println(object2)                 <span class="comment">// 0xc00000a108</span></span><br><span class="line">	fmt.Println(*object2)                <span class="comment">// 0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Go</category>
      </categories>
  </entry>
  <entry>
    <title>【JUnit】单元测试</title>
    <url>/2024/06/25/%E3%80%90JUnit%E3%80%91%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<hr>
<ol>
<li>Before注解</li>
</ol>
<p>：在标有@Test注解的方法执行前先执行，每一个测试方法的执行都会执行一遍Before注解所在的方法</p>
<ol start="2">
<li>After注解</li>
</ol>
<p>:  在标有@Test注解的方法执行后再执行，每一个测试方法执行完都会执行一遍After注解所在的方法</p>
<ol start="3">
<li>Test注解</li>
</ol>
<p>： 表明该方法为测试方法，可以直接启动，不用通过main（）函数入口启动</p>
<ol start="4">
<li>BeforeClass注解</li>
</ol>
<p>： 在测试类加载完，所有方法执行前执行，由于该注解只能存在于静态方法上，所以只执行一次</p>
<ol start="5">
<li>AfterClass注解</li>
</ol>
<p>： 在所有方法执行完毕后执行，由于该注解只能存在于静态方法上，所以只执行一次</p>
<p>测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> JUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JUnit_03_sequences</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutDown</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;  after...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterClass</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">afterClass</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterClass...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">beforeClass</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;beforeClass...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;  before...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testA</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;   testA...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testB</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;   testB...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>测试结果：<br><img src="/2024/06/25/%E3%80%90JUnit%E3%80%91%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/%5Bimage.png"></p>
]]></content>
      <categories>
        <category>JUnit</category>
      </categories>
  </entry>
  <entry>
    <title>【JUnit】异常测试</title>
    <url>/2024/06/25/%E3%80%90JUnit%E3%80%91%E5%BC%82%E5%B8%B8%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<hr>
<p>测试是否有异常抛出</p>
<p>测试_有异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> JUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JUnit_04_exception</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test(expected = NumberFormatException.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> Integer.parseInt(<span class="string">&quot;&amp;||!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>测试结果<br><img src="/2024/06/25/%E3%80%90JUnit%E3%80%91%E5%BC%82%E5%B8%B8%E6%B5%8B%E8%AF%95/1.png"><br>测试_无异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> JUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JUnit_04_exception</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test(expected = NumberFormatException.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> Integer.parseInt(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>测试结果<br><img src="/2024/06/25/%E3%80%90JUnit%E3%80%91%E5%BC%82%E5%B8%B8%E6%B5%8B%E8%AF%95/2.png"></p>
]]></content>
      <categories>
        <category>JUnit</category>
      </categories>
  </entry>
  <entry>
    <title>【Mysql】存储引擎</title>
    <url>/2024/08/15/%E3%80%90Mysql%E3%80%91%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<hr>
<h2 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h2><ol>
<li>支持事务</li>
<li>聚簇索引</li>
<li>锁的最小颗粒度是行级锁</li>
<li>count语句需要扫描全表</li>
</ol>
<h2 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h2><ol>
<li>不支持事务</li>
<li>非聚簇索引</li>
<li>锁的最小颗粒度是表级锁</li>
<li>用一个变量维护行数，所以count语句的时间复杂度为O（1）</li>
</ol>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
  </entry>
</search>
